// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: playdek/twilight_struggle/v1/events.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Playdek.TwilightStruggle.V1 {

  /// <summary>Holder for reflection information generated from playdek/twilight_struggle/v1/events.proto</summary>
  public static partial class EventsReflection {

    #region Descriptor
    /// <summary>File descriptor for playdek/twilight_struggle/v1/events.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilwbGF5ZGVrL3R3aWxpZ2h0X3N0cnVnZ2xlL3YxL2V2ZW50cy5wcm90bxIc",
            "cGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MRofZ29vZ2xlL3Byb3RvYnVm",
            "L3RpbWVzdGFtcC5wcm90byLlHAoJR2FtZUV2ZW50Ei0KCXRpbWVzdGFtcBgB",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASTAoSb3V0cHV0X2V2",
            "ZW50X3BhdXNlGAogASgLMi4ucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52",
            "MS5PdXRwdXRFdmVudFBhdXNlSAASXQobb3V0cHV0X2V2ZW50X2FuaW1hdGlv",
            "bl9jYXJkGAsgASgLMjYucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5P",
            "dXRwdXRFdmVudEFuaW1hdGlvbkNhcmRIABJuCiRvdXRwdXRfZXZlbnRfYW5p",
            "bWF0aW9uX2FkZF9pbmZsdWVuY2UYDCABKAsyPi5wbGF5ZGVrLnR3aWxpZ2h0",
            "X3N0cnVnZ2xlLnYxLk91dHB1dEV2ZW50QW5pbWF0aW9uQWRkSW5mbHVlbmNl",
            "SAASdAonb3V0cHV0X2V2ZW50X2FuaW1hdGlvbl9yZW1vdmVfaW5mbHVlbmNl",
            "GA0gASgLMkEucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5PdXRwdXRF",
            "dmVudEFuaW1hdGlvblJlbW92ZUluZmx1ZW5jZUgAEnAKJW91dHB1dF9ldmVu",
            "dF9hbmltYXRpb25fdGFyZ2V0X2NvdW50cnkYDiABKAsyPy5wbGF5ZGVrLnR3",
            "aWxpZ2h0X3N0cnVnZ2xlLnYxLk91dHB1dEV2ZW50QW5pbWF0aW9uVGFyZ2V0",
            "Q291bnRyeUgAEnAKJW91dHB1dF9ldmVudF9hbmltYXRpb25fdmljdG9yeV9w",
            "b2ludHMYDyABKAsyPy5wbGF5ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xlLnYxLk91",
            "dHB1dEV2ZW50QW5pbWF0aW9uVmljdG9yeVBvaW50c0gAEk0KEmNvdW50cnlf",
            "ZGVmaW5pdGlvbhgQIAEoCzIvLnBsYXlkZWsudHdpbGlnaHRfc3RydWdnbGUu",
            "djEuQ291bnRyeURlZmluaXRpb25IABJLChFjb3VudHJ5X2luZmx1ZW5jZRgR",
            "IAEoCzIuLnBsYXlkZWsudHdpbGlnaHRfc3RydWdnbGUudjEuQ291bnRyeUlu",
            "Zmx1ZW5jZUgAEkMKDWNhcmRfbG9jYXRpb24YEiABKAsyKi5wbGF5ZGVrLnR3",
            "aWxpZ2h0X3N0cnVnZ2xlLnYxLkNhcmRMb2NhdGlvbkgAEk0KE2NhcmRfaW5f",
            "cGxheV9zdGF0dXMYEyABKAsyLi5wbGF5ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xl",
            "LnYxLkNhcmRJblBsYXlTdGF0dXNIABJBCgxhY3Rpb25fcm91bmQYFCABKAsy",
            "KS5wbGF5ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xlLnYxLkFjdGlvblJvdW5kSAAS",
            "RQoOcGhhc2luZ19wbGF5ZXIYFSABKAsyKy5wbGF5ZGVrLnR3aWxpZ2h0X3N0",
            "cnVnZ2xlLnYxLlBoYXNpbmdQbGF5ZXJIABI/Cgt0dXJuX251bWJlchgWIAEo",
            "CzIoLnBsYXlkZWsudHdpbGlnaHRfc3RydWdnbGUudjEuVHVybk51bWJlckgA",
            "Ek4KE3ZpY3RvcnlfcG9pbnRfdHJhY2sYFyABKAsyLy5wbGF5ZGVrLnR3aWxp",
            "Z2h0X3N0cnVnZ2xlLnYxLlZpY3RvcnlQb2ludFRyYWNrSAASQQoMZGVmY29u",
            "X2xldmVsGBggASgLMikucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5E",
            "ZWZjb25MZXZlbEgAEkEKDG1pbGl0YXJ5X29wcxgZIAEoCzIpLnBsYXlkZWsu",
            "dHdpbGlnaHRfc3RydWdnbGUudjEuTWlsaXRhcnlPcHNIABJIChBzcGFjZV9y",
            "YWNlX3RyYWNrGBogASgLMiwucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52",
            "MS5TcGFjZVJhY2VUcmFja0gAEkEKDGNhcmRzX3NwYWNlZBgbIAEoCzIpLnBs",
            "YXlkZWsudHdpbGlnaHRfc3RydWdnbGUudjEuQ2FyZHNTcGFjZWRIABI9Cgpj",
            "aGluYV9jYXJkGBwgASgLMicucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52",
            "MS5DaGluYUNhcmRIABI7CglnYW1lX292ZXIYHSABKAsyJi5wbGF5ZGVrLnR3",
            "aWxpZ2h0X3N0cnVnZ2xlLnYxLkdhbWVPdmVySAASQQoMYXNzaWduX3NpZGVz",
            "GB4gASgLMikucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5Bc3NpZ25T",
            "aWRlc0gAEkAKC3JlYWxpZ25tZW50GB8gASgLMikucGxheWRlay50d2lsaWdo",
            "dF9zdHJ1Z2dsZS52MS5SZWFsaWdubWVudEgAEkoKEXB1c2hfcmVzb2x2ZV9j",
            "YXJkGCAgASgLMi0ucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5QdXNo",
            "UmVzb2x2ZUNhcmRIABJIChBwb3BfcmVzb2x2ZV9jYXJkGCEgASgLMiwucGxh",
            "eWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5Qb3BSZXNvbHZlQ2FyZEgAEkgK",
            "EHB1c2hfcmV2ZWFsX2NhcmQYIiABKAsyLC5wbGF5ZGVrLnR3aWxpZ2h0X3N0",
            "cnVnZ2xlLnYxLlB1c2hSZXZlYWxDYXJkSAASRgoPcG9wX3JldmVhbF9jYXJk",
            "GCMgASgLMisucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5Qb3BSZXZl",
            "YWxDYXJkSAASUwoWc2V0X3JldmVhbF9jYXJkX3BsYXllchgkIAEoCzIxLnBs",
            "YXlkZWsudHdpbGlnaHRfc3RydWdnbGUudjEuU2V0UmV2ZWFsQ2FyZFBsYXll",
            "ckgAElsKGnNldF9oZWFkbGluZV9jYXJkX3JldmVhbGVkGCUgASgLMjUucGxh",
            "eWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5TZXRIZWFkbGluZUNhcmRSZXZl",
            "YWxlZEgAEkMKDWxvYWRfcHJvZ3Jlc3MYJiABKAsyKi5wbGF5ZGVrLnR3aWxp",
            "Z2h0X3N0cnVnZ2xlLnYxLkxvYWRQcm9ncmVzc0gAElQKFmNvbW1pdF9wbGF5",
            "ZXJfZGVjaXNpb24YJyABKAsyMi5wbGF5ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xl",
            "LnYxLkNvbW1pdFBsYXllckRlY2lzaW9uSAASOwoJY291cF9yb2xsGCggASgL",
            "MiYucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5Db3VwUm9sbEgAEjkK",
            "CHdhcl9yb2xsGCkgASgLMiUucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52",
            "MS5XYXJSb2xsSAASRgoPc3BhY2VfcmFjZV9yb2xsGCogASgLMisucGxheWRl",
            "ay50d2lsaWdodF9zdHJ1Z2dsZS52MS5TcGFjZVJhY2VSb2xsSAASOwoJdHJh",
            "cF9yb2xsGCsgASgLMiYucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5U",
            "cmFwUm9sbEgAEk4KE3Njb3JpbmdfY2FyZF9wbGF5ZWQYLCABKAsyLy5wbGF5",
            "ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xlLnYxLlNjb3JpbmdDYXJkUGxheWVkSAAS",
            "QwoNZmluYWxfc2NvcmluZxgtIAEoCzIqLnBsYXlkZWsudHdpbGlnaHRfc3Ry",
            "dWdnbGUudjEuRmluYWxTY29yaW5nSAASPwoLZWZmZWN0X3JvbGwYLiABKAsy",
            "KC5wbGF5ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xlLnYxLkVmZmVjdFJvbGxIABI5",
            "CghlbmRfdHVybhgvIAEoCzIlLnBsYXlkZWsudHdpbGlnaHRfc3RydWdnbGUu",
            "djEuRW5kVHVybkgAEksKEWhlYWRsaW5lX2Fubm91bmNlGDAgASgLMi4ucGxh",
            "eWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5IZWFkbGluZUFubm91bmNlSAAS",
            "PAoJcmVzaHVmZmxlGDEgASgLMicucGxheWRlay50d2lsaWdodF9zdHJ1Z2ds",
            "ZS52MS5SZXNodWZmbGVIABJXChhwYXVzZV9mb3JfcmV2ZWFsZWRfY2FyZHMY",
            "MiABKAsyMy5wbGF5ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xlLnYxLlBhdXNlRm9y",
            "UmV2ZWFsZWRDYXJkc0gAEl0KG3R1dG9yaWFsX2FpX3NlbGVjdGVkX29wdGlv",
            "bhgzIAEoCzI2LnBsYXlkZWsudHdpbGlnaHRfc3RydWdnbGUudjEuVHV0b3Jp",
            "YWxBSVNlbGVjdGVkT3B0aW9uSAASRwoPYmlkZGluZ19yZXN1bHRzGDQgASgL",
            "MiwucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5CaWRkaW5nUmVzdWx0",
            "c0gAEjsKCXR1cm5femVybxg1IAEoCzImLnBsYXlkZWsudHdpbGlnaHRfc3Ry",
            "dWdnbGUudjEuVHVyblplcm9IABJRChV0dXJuX3plcm9fY3Jpc2lzX2NhcmQY",
            "NiABKAsyMC5wbGF5ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xlLnYxLlR1cm5aZXJv",
            "Q3Jpc2lzQ2FyZEgAEl8KHHNldF9zdGF0ZWNyYWZ0X2NhcmRfcmV2ZWFsZWQY",
            "NyABKAsyNy5wbGF5ZGVrLnR3aWxpZ2h0X3N0cnVnZ2xlLnYxLlNldFN0YXRl",
            "Y3JhZnRDYXJkUmV2ZWFsZWRIABJIChBjcmlzaXNfY2FyZF9yb2xsGDggASgL",
            "MiwucGxheWRlay50d2lsaWdodF9zdHJ1Z2dsZS52MS5DcmlzaXNDYXJkUm9s",
            "bEgAQgkKB2RldGFpbHMiXAoQT3V0cHV0RXZlbnRQYXVzZRISCgpwYXVzZV90",
            "eXBlGAEgASgFEhYKDmFuaW1hdGlvbl9kYXRhGAIgASgNEhwKFGV4Y2x1ZGVf",
            "cGxheWVyX2luZGV4GAMgASgFIu4BChhPdXRwdXRFdmVudEFuaW1hdGlvbkNh",
            "cmQSGAoQY2FyZF9pbnN0YW5jZV9pZBgBIAEoBRIhChlhbmltYXRpb25fc291",
            "cmNlX2xvY2F0aW9uGAIgASgFEiQKHGFuaW1hdGlvbl9zb3VyY2VfaW5zdGFu",
            "Y2VfaWQYAyABKAUSJgoeYW5pbWF0aW9uX2Rlc3RpbmF0aW9uX2xvY2F0aW9u",
            "GAQgASgFEikKIWFuaW1hdGlvbl9kZXN0aW5hdGlvbl9pbnN0YW5jZV9pZBgF",
            "IAEoBRIcChRhbmltYXRpb25fZXZlbnRfaGludBgGIAEoBSK0AQogT3V0cHV0",
            "RXZlbnRBbmltYXRpb25BZGRJbmZsdWVuY2USGwoTc291cmNlX3BsYXllcl9p",
            "bmRleBgBIAEoBRIfChdzb3VyY2VfY2FyZF9pbnN0YW5jZV9pZBgCIAEoBRIb",
            "ChNjb3VudHJ5X2luc3RhbmNlX2lkGAMgASgFEhcKD2luZmx1ZW5jZV9jb3Vu",
            "dBgEIAEoBRIcChRhbmltYXRpb25fZXZlbnRfaGludBgFIAEoBSK3AQojT3V0",
            "cHV0RXZlbnRBbmltYXRpb25SZW1vdmVJbmZsdWVuY2USGwoTc291cmNlX3Bs",
            "YXllcl9pbmRleBgBIAEoBRIfChdzb3VyY2VfY2FyZF9pbnN0YW5jZV9pZBgC",
            "IAEoBRIbChNjb3VudHJ5X2luc3RhbmNlX2lkGAMgASgFEhcKD2luZmx1ZW5j",
            "ZV9jb3VudBgEIAEoBRIcChRhbmltYXRpb25fZXZlbnRfaGludBgFIAEoBSKx",
            "AQohT3V0cHV0RXZlbnRBbmltYXRpb25UYXJnZXRDb3VudHJ5EhsKE3NvdXJj",
            "ZV9wbGF5ZXJfaW5kZXgYASABKAUSHwoXc291cmNlX2NhcmRfaW5zdGFuY2Vf",
            "aWQYAiABKAUSGwoTY291bnRyeV9pbnN0YW5jZV9pZBgDIAEoBRITCgt0YXJn",
            "ZXRfdHlwZRgEIAEoBRIcChRhbmltYXRpb25fZXZlbnRfaGludBgFIAEoBSJ/",
            "CiFPdXRwdXRFdmVudEFuaW1hdGlvblZpY3RvcnlQb2ludHMSHwoXc291cmNl",
            "X2NhcmRfaW5zdGFuY2VfaWQYASABKAUSGwoTdmljdG9yeV9wb2ludF9jb3Vu",
            "dBgCIAEoBRIcChRhbmltYXRpb25fZXZlbnRfaGludBgDIAEoBSJIChFDb3Vu",
            "dHJ5RGVmaW5pdGlvbhIKCgJpZBgBIAEoBRIRCglzdGFiaWxpdHkYAiABKAUS",
            "FAoMYmF0dGxlZ3JvdW5kGAMgASgFIk0KEENvdW50cnlJbmZsdWVuY2USCgoC",
            "aWQYASABKAUSFgoOdXNzcl9pbmZsdWVuY2UYAiABKAUSFQoNdXNhX2luZmx1",
            "ZW5jZRgDIAEoBSJECgxDYXJkTG9jYXRpb24SCgoCaWQYASABKAUSEAoIbG9j",
            "YXRpb24YAiABKAUSFgoOZG9fbm90X2FuaW1hdGUYAyABKAUikgEKEENhcmRJ",
            "blBsYXlTdGF0dXMSIAoYY2FyZF9pbl9wbGF5X2luc3RhbmNlX2lkGAEgASgF",
            "Eh8KF3NvdXJjZV9jYXJkX2luc3RhbmNlX2lkGAIgASgFEhMKC293bmVyX2lu",
            "ZGV4GAMgASgFEhUKDWR1cmF0aW9uX3R5cGUYBCABKAUSDwoHaW5fcGxheRgF",
            "IAEoBSLkAQoLQWN0aW9uUm91bmQSFQoNaXNfc2ltdWxhdGluZxgBIAEoBRIU",
            "CgxhY3Rpb25fcm91bmQYAiABKAUSEwoLZW5kX29mX3R1cm4YAyABKAUSIQoZ",
            "cGhhc2luZ19wbGF5ZXJfc3VwZXJwb3dlchgEIAEoBRIRCglwbGF5ZXJfaWQY",
            "BSABKAUSIAoYYWZmZWN0ZWRfYnlfbWlzc2lsZV9lbnZ5GAYgASgFEh8KF2Fm",
            "ZmVjdGVkX2J5X2tyZW1saW5fZmx1GAcgASgFEhoKEnNjb3JpbmdfY2FyZF9j",
            "b3VudBgIIAEoBSInCg1QaGFzaW5nUGxheWVyEhYKDnBoYXNpbmdfcGxheWVy",
            "GAEgASgFInYKClR1cm5OdW1iZXISFQoNaXNfc2ltdWxhdGluZxgBIAEoBRIT",
            "Cgt0dXJuX251bWJlchgCIAEoBRIRCgl1c3NyX2hhbmQYAyABKAUSEAoIdXNh",
            "X2hhbmQYBCABKAUSFwoPaGFzX2V4dHJhX3JvdW5kGAUgASgFIjAKEVZpY3Rv",
            "cnlQb2ludFRyYWNrEhsKE3ZpY3RvcnlfcG9pbnRfdHJhY2sYASABKAUiOgoL",
            "RGVmY29uTGV2ZWwSFQoNaXNfc2ltdWxhdGluZxgBIAEoBRIUCgxkZWZjb25f",
            "bGV2ZWwYAiABKAUiNgoLTWlsaXRhcnlPcHMSEwoLdXNzcl9taWxvcHMYASAB",
            "KAUSEgoKdXNhX21pbG9wcxgCIAEoBSI3Cg5TcGFjZVJhY2VUcmFjaxISCgp1",
            "c3NyX3NwYWNlGAEgASgFEhEKCXVzYV9zcGFjZRgCIAEoBSJCCgtDYXJkc1Nw",
            "YWNlZBIZChF1c3NyX2NhcmRzX3NwYWNlZBgBIAEoBRIYChB1c2FfY2FyZHNf",
            "c3BhY2VkGAIgASgFIkEKCUNoaW5hQ2FyZBITCgtpbnN0YW5jZV9pZBgBIAEo",
            "BRIOCgZwbGF5ZXIYAiABKAUSDwoHZmFjZV91cBgDIAEoBSIsCghHYW1lT3Zl",
            "chIOCgZ3aW5uZXIYASABKAUSEAoId2luX3R5cGUYAiABKAUiJQoLQXNzaWdu",
            "U2lkZXMSFgoOdXNzcl9wbGF5ZXJfaWQYASABKAUibwoLUmVhbGlnbm1lbnQS",
            "HAoUcmVhbGlnbl9wbGF5ZXJfaW5kZXgYASABKAUSDwoHY291bnRyeRgCIAEo",
            "BRIYChB1c3NyX3JvbGxfcmVzdWx0GAMgASgFEhcKD3VzYV9yb2xsX3Jlc3Vs",
            "dBgEIAEoBSIfCg9QdXNoUmVzb2x2ZUNhcmQSDAoEY2FyZBgBIAEoBSIeCg5Q",
            "b3BSZXNvbHZlQ2FyZBIMCgRjYXJkGAEgASgFIi4KDlB1c2hSZXZlYWxDYXJk",
            "EgwKBGNhcmQYASABKAUSDgoGcGxheWVyGAIgASgFIh0KDVBvcFJldmVhbENh",
            "cmQSDAoEY2FyZBgBIAEoBSIrChNTZXRSZXZlYWxDYXJkUGxheWVyEhQKDHBs",
            "YXllcl9pbmRleBgBIAEoBSJBChdTZXRIZWFkbGluZUNhcmRSZXZlYWxlZBIU",
            "CgxwbGF5ZXJfaW5kZXgYASABKAUSEAoIcmV2ZWFsZWQYAiABKAUiIAoMTG9h",
            "ZFByb2dyZXNzEhAKCHByb2dyZXNzGAEgASgCIkcKFENvbW1pdFBsYXllckRl",
            "Y2lzaW9uEhIKCm1vdmVfY291bnQYASABKAUSGwoTd2lubmVyX3BsYXllcl9p",
            "bmRleBgCIAEoBSJCCghDb3VwUm9sbBIUCgxwbGF5ZXJfaW5kZXgYASABKAUS",
            "EgoKY291bnRyeV9pZBgCIAEoBRIMCgRyb2xsGAMgASgFIkEKB1dhclJvbGwS",
            "FAoMcGxheWVyX2luZGV4GAEgASgFEhIKCmNvdW50cnlfaWQYAiABKAUSDAoE",
            "cm9sbBgDIAEoBSK9AwoNU3BhY2VSYWNlUm9sbBIVCg1pc19zaW11bGF0aW5n",
            "GAEgASgFEgwKBHJvbGwYAiABKAUSDwoHc3VjY2VzcxgDIAEoBRIMCgRjYXJk",
            "GAQgASgFEh8KF3NwYWNlX3JhY2VfcGxheWVyX2luZGV4GAUgASgFEiAKGHNw",
            "YWNlX3JhY2VfY3VycmVudF9sZXZlbBgGIAEoBRIhChlzcGFjZV9yYWNlX29w",
            "cG9uZW50X2xldmVsGAcgASgFEiUKHXNwYWNlX3JhY2VfcmVtYWluaW5nX2F0",
            "dGVtcHRzGAggASgFEh0KFXNwYWNlX3JhY2VfbmV4dF9sZXZlbBgJIAEoBRIf",
            "ChdzcGFjZV9yYWNlX3JlcXVpcmVkX29wcxgKIAEoBRIgChhzcGFjZV9yYWNl",
            "X3JlcXVpcmVkX3JvbGwYCyABKAUSKQohc3BhY2VfcmFjZV9hZHZhbmNlX3Zp",
            "Y3RvcnlfcG9pbnRzGAwgASgFEiUKHXNwYWNlX3JhY2VfYWR2YW5jZV9nYWlu",
            "X2JvbnVzGA0gASgFEicKH3NwYWNlX3JhY2VfYWR2YW5jZV9yZW1vdmVfYm9u",
            "dXMYDiABKAUisAEKCFRyYXBSb2xsEhEKCXBsYXllcl9pZBgBIAEoBRIMCgRy",
            "b2xsGAIgASgFEhsKE3RyYXBfc291cmNlX2NhcmRfaWQYAyABKAUSHAoUdHJh",
            "cF9kaXNjYXJkX2NhcmRfaWQYBCABKAUSJwofdHJhcF9yZXF1aXJlZF9vcGVy",
            "YXRpb25zX3BvaW50cxgFIAEoBRIfChd0cmFwX2VzY2FwZV9yb2xsX3Rhcmdl",
            "dBgGIAEoBSI3ChFTY29yaW5nQ2FyZFBsYXllZBIPCgdjYXJkX2lkGAEgASgF",
            "EhEKCXBsYXllcl9pZBgCIAEoBSJoCgxGaW5hbFNjb3JpbmcSGwoTdmljdG9y",
            "eV9wb2ludHNfdXNzchgBIAEoBRIaChJ2aWN0b3J5X3BvaW50c191c2EYAiAB",
            "KAUSHwoXZXVyb3BlYW5fY29udHJvbF93aW5uZXIYAyABKAUiawoKRWZmZWN0",
            "Um9sbBIPCgdjYXJkX2lkGAEgASgFEhEKCXVzc3Jfcm9sbBgCIAEoBRITCgt1",
            "c3NyX21vZGlmeRgDIAEoBRIQCgh1c2Ffcm9sbBgEIAEoBRISCgp1c2FfbW9k",
            "aWZ5GAUgASgFIlAKB0VuZFR1cm4SEAoIdXNzcl9vcHMYASABKAUSDwoHdXNh",
            "X29wcxgCIAEoBRIOCgZkZWZjb24YAyABKAUSEgoKc3BhY2VfcmFjZRgEIAEo",
            "BSImChBIZWFkbGluZUFubm91bmNlEhIKCnNwYWNlX3JhY2UYASABKAUiGQoJ",
            "UmVzaHVmZmxlEgwKBHplcm8YASABKAUiLQoVUGF1c2VGb3JSZXZlYWxlZENh",
            "cmRzEhQKDHBsYXllcl9pbmRleBgBIAEoBSJIChhUdXRvcmlhbEFJU2VsZWN0",
            "ZWRPcHRpb24SFgoOc2VsZWN0aW9uX2hpbnQYASABKA0SFAoMc2VsZWN0aW9u",
            "X2lkGAIgASgNIqsBCg5CaWRkaW5nUmVzdWx0cxISCgpwbGF5ZXIxX2lkGAEg",
            "ASgFEhMKC3BsYXllcjFfYmlkGAIgASgFEhgKEHBsYXllcjFfYmlkX3NpZGUY",
            "AyABKAUSEgoKcGxheWVyMl9pZBgEIAEoBRITCgtwbGF5ZXIyX2JpZBgFIAEo",
            "BRIYChBwbGF5ZXIyX2JpZF9zaWRlGAYgASgFEhMKC3RpZV9icmVha2VyGAcg",
            "ASgFIhkKCFR1cm5aZXJvEg0KBWJlZ2luGAEgASgFIjUKElR1cm5aZXJvQ3Jp",
            "c2lzQ2FyZBIfChdjcmlzaXNfY2FyZF9pbnN0YW5jZV9pZBgBIAEoBSJDChlT",
            "ZXRTdGF0ZWNyYWZ0Q2FyZFJldmVhbGVkEhQKDHBsYXllcl9pbmRleBgBIAEo",
            "BRIQCghyZXZlYWxlZBgCIAEoBSKjAQoOQ3Jpc2lzQ2FyZFJvbGwSGwoTY3Jp",
            "c2lzX3Jlc3VsdF9pbmRleBgBIAEoBRIfChdjcmlzaXNfY2FyZF9pbnN0YW5j",
            "ZV9pZBgCIAEoBRIQCghkaWVfcm9sbBgDIAEoBRIVCg1tb2RpZmllcl91c3Ny",
            "GAQgASgFEhQKDG1vZGlmaWVyX3VzYRgFIAEoBRIUCgxmaW5hbF9yZXN1bHQY",
            "BiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.GameEvent), global::Playdek.TwilightStruggle.V1.GameEvent.Parser, new[]{ "Timestamp", "OutputEventPause", "OutputEventAnimationCard", "OutputEventAnimationAddInfluence", "OutputEventAnimationRemoveInfluence", "OutputEventAnimationTargetCountry", "OutputEventAnimationVictoryPoints", "CountryDefinition", "CountryInfluence", "CardLocation", "CardInPlayStatus", "ActionRound", "PhasingPlayer", "TurnNumber", "VictoryPointTrack", "DefconLevel", "MilitaryOps", "SpaceRaceTrack", "CardsSpaced", "ChinaCard", "GameOver", "AssignSides", "Realignment", "PushResolveCard", "PopResolveCard", "PushRevealCard", "PopRevealCard", "SetRevealCardPlayer", "SetHeadlineCardRevealed", "LoadProgress", "CommitPlayerDecision", "CoupRoll", "WarRoll", "SpaceRaceRoll", "TrapRoll", "ScoringCardPlayed", "FinalScoring", "EffectRoll", "EndTurn", "HeadlineAnnounce", "Reshuffle", "PauseForRevealedCards", "TutorialAiSelectedOption", "BiddingResults", "TurnZero", "TurnZeroCrisisCard", "SetStatecraftCardRevealed", "CrisisCardRoll" }, new[]{ "Details" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.OutputEventPause), global::Playdek.TwilightStruggle.V1.OutputEventPause.Parser, new[]{ "PauseType", "AnimationData", "ExcludePlayerIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.OutputEventAnimationCard), global::Playdek.TwilightStruggle.V1.OutputEventAnimationCard.Parser, new[]{ "CardInstanceId", "AnimationSourceLocation", "AnimationSourceInstanceId", "AnimationDestinationLocation", "AnimationDestinationInstanceId", "AnimationEventHint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.OutputEventAnimationAddInfluence), global::Playdek.TwilightStruggle.V1.OutputEventAnimationAddInfluence.Parser, new[]{ "SourcePlayerIndex", "SourceCardInstanceId", "CountryInstanceId", "InfluenceCount", "AnimationEventHint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.OutputEventAnimationRemoveInfluence), global::Playdek.TwilightStruggle.V1.OutputEventAnimationRemoveInfluence.Parser, new[]{ "SourcePlayerIndex", "SourceCardInstanceId", "CountryInstanceId", "InfluenceCount", "AnimationEventHint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.OutputEventAnimationTargetCountry), global::Playdek.TwilightStruggle.V1.OutputEventAnimationTargetCountry.Parser, new[]{ "SourcePlayerIndex", "SourceCardInstanceId", "CountryInstanceId", "TargetType", "AnimationEventHint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.OutputEventAnimationVictoryPoints), global::Playdek.TwilightStruggle.V1.OutputEventAnimationVictoryPoints.Parser, new[]{ "SourceCardInstanceId", "VictoryPointCount", "AnimationEventHint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.CountryDefinition), global::Playdek.TwilightStruggle.V1.CountryDefinition.Parser, new[]{ "Id", "Stability", "Battleground" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.CountryInfluence), global::Playdek.TwilightStruggle.V1.CountryInfluence.Parser, new[]{ "Id", "UssrInfluence", "UsaInfluence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.CardLocation), global::Playdek.TwilightStruggle.V1.CardLocation.Parser, new[]{ "Id", "Location", "DoNotAnimate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.CardInPlayStatus), global::Playdek.TwilightStruggle.V1.CardInPlayStatus.Parser, new[]{ "CardInPlayInstanceId", "SourceCardInstanceId", "OwnerIndex", "DurationType", "InPlay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.ActionRound), global::Playdek.TwilightStruggle.V1.ActionRound.Parser, new[]{ "IsSimulating", "ActionRound_", "EndOfTurn", "PhasingPlayerSuperpower", "PlayerId", "AffectedByMissileEnvy", "AffectedByKremlinFlu", "ScoringCardCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.PhasingPlayer), global::Playdek.TwilightStruggle.V1.PhasingPlayer.Parser, new[]{ "PhasingPlayer_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.TurnNumber), global::Playdek.TwilightStruggle.V1.TurnNumber.Parser, new[]{ "IsSimulating", "TurnNumber_", "UssrHand", "UsaHand", "HasExtraRound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.VictoryPointTrack), global::Playdek.TwilightStruggle.V1.VictoryPointTrack.Parser, new[]{ "VictoryPointTrack_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.DefconLevel), global::Playdek.TwilightStruggle.V1.DefconLevel.Parser, new[]{ "IsSimulating", "DefconLevel_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.MilitaryOps), global::Playdek.TwilightStruggle.V1.MilitaryOps.Parser, new[]{ "UssrMilops", "UsaMilops" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.SpaceRaceTrack), global::Playdek.TwilightStruggle.V1.SpaceRaceTrack.Parser, new[]{ "UssrSpace", "UsaSpace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.CardsSpaced), global::Playdek.TwilightStruggle.V1.CardsSpaced.Parser, new[]{ "UssrCardsSpaced", "UsaCardsSpaced" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.ChinaCard), global::Playdek.TwilightStruggle.V1.ChinaCard.Parser, new[]{ "InstanceId", "Player", "FaceUp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.GameOver), global::Playdek.TwilightStruggle.V1.GameOver.Parser, new[]{ "Winner", "WinType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.AssignSides), global::Playdek.TwilightStruggle.V1.AssignSides.Parser, new[]{ "UssrPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.Realignment), global::Playdek.TwilightStruggle.V1.Realignment.Parser, new[]{ "RealignPlayerIndex", "Country", "UssrRollResult", "UsaRollResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.PushResolveCard), global::Playdek.TwilightStruggle.V1.PushResolveCard.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.PopResolveCard), global::Playdek.TwilightStruggle.V1.PopResolveCard.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.PushRevealCard), global::Playdek.TwilightStruggle.V1.PushRevealCard.Parser, new[]{ "Card", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.PopRevealCard), global::Playdek.TwilightStruggle.V1.PopRevealCard.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.SetRevealCardPlayer), global::Playdek.TwilightStruggle.V1.SetRevealCardPlayer.Parser, new[]{ "PlayerIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.SetHeadlineCardRevealed), global::Playdek.TwilightStruggle.V1.SetHeadlineCardRevealed.Parser, new[]{ "PlayerIndex", "Revealed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.LoadProgress), global::Playdek.TwilightStruggle.V1.LoadProgress.Parser, new[]{ "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.CommitPlayerDecision), global::Playdek.TwilightStruggle.V1.CommitPlayerDecision.Parser, new[]{ "MoveCount", "WinnerPlayerIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.CoupRoll), global::Playdek.TwilightStruggle.V1.CoupRoll.Parser, new[]{ "PlayerIndex", "CountryId", "Roll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.WarRoll), global::Playdek.TwilightStruggle.V1.WarRoll.Parser, new[]{ "PlayerIndex", "CountryId", "Roll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.SpaceRaceRoll), global::Playdek.TwilightStruggle.V1.SpaceRaceRoll.Parser, new[]{ "IsSimulating", "Roll", "Success", "Card", "SpaceRacePlayerIndex", "SpaceRaceCurrentLevel", "SpaceRaceOpponentLevel", "SpaceRaceRemainingAttempts", "SpaceRaceNextLevel", "SpaceRaceRequiredOps", "SpaceRaceRequiredRoll", "SpaceRaceAdvanceVictoryPoints", "SpaceRaceAdvanceGainBonus", "SpaceRaceAdvanceRemoveBonus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.TrapRoll), global::Playdek.TwilightStruggle.V1.TrapRoll.Parser, new[]{ "PlayerId", "Roll", "TrapSourceCardId", "TrapDiscardCardId", "TrapRequiredOperationsPoints", "TrapEscapeRollTarget" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.ScoringCardPlayed), global::Playdek.TwilightStruggle.V1.ScoringCardPlayed.Parser, new[]{ "CardId", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.FinalScoring), global::Playdek.TwilightStruggle.V1.FinalScoring.Parser, new[]{ "VictoryPointsUssr", "VictoryPointsUsa", "EuropeanControlWinner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.EffectRoll), global::Playdek.TwilightStruggle.V1.EffectRoll.Parser, new[]{ "CardId", "UssrRoll", "UssrModify", "UsaRoll", "UsaModify" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.EndTurn), global::Playdek.TwilightStruggle.V1.EndTurn.Parser, new[]{ "UssrOps", "UsaOps", "Defcon", "SpaceRace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.HeadlineAnnounce), global::Playdek.TwilightStruggle.V1.HeadlineAnnounce.Parser, new[]{ "SpaceRace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.Reshuffle), global::Playdek.TwilightStruggle.V1.Reshuffle.Parser, new[]{ "Zero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.PauseForRevealedCards), global::Playdek.TwilightStruggle.V1.PauseForRevealedCards.Parser, new[]{ "PlayerIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.TutorialAISelectedOption), global::Playdek.TwilightStruggle.V1.TutorialAISelectedOption.Parser, new[]{ "SelectionHint", "SelectionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.BiddingResults), global::Playdek.TwilightStruggle.V1.BiddingResults.Parser, new[]{ "Player1Id", "Player1Bid", "Player1BidSide", "Player2Id", "Player2Bid", "Player2BidSide", "TieBreaker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.TurnZero), global::Playdek.TwilightStruggle.V1.TurnZero.Parser, new[]{ "Begin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.TurnZeroCrisisCard), global::Playdek.TwilightStruggle.V1.TurnZeroCrisisCard.Parser, new[]{ "CrisisCardInstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.SetStatecraftCardRevealed), global::Playdek.TwilightStruggle.V1.SetStatecraftCardRevealed.Parser, new[]{ "PlayerIndex", "Revealed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Playdek.TwilightStruggle.V1.CrisisCardRoll), global::Playdek.TwilightStruggle.V1.CrisisCardRoll.Parser, new[]{ "CrisisResultIndex", "CrisisCardInstanceId", "DieRoll", "ModifierUssr", "ModifierUsa", "FinalResult" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameEvent : pb::IMessage<GameEvent> {
    private static readonly pb::MessageParser<GameEvent> _parser = new pb::MessageParser<GameEvent>(() => new GameEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent(GameEvent other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      switch (other.DetailsCase) {
        case DetailsOneofCase.OutputEventPause:
          OutputEventPause = other.OutputEventPause.Clone();
          break;
        case DetailsOneofCase.OutputEventAnimationCard:
          OutputEventAnimationCard = other.OutputEventAnimationCard.Clone();
          break;
        case DetailsOneofCase.OutputEventAnimationAddInfluence:
          OutputEventAnimationAddInfluence = other.OutputEventAnimationAddInfluence.Clone();
          break;
        case DetailsOneofCase.OutputEventAnimationRemoveInfluence:
          OutputEventAnimationRemoveInfluence = other.OutputEventAnimationRemoveInfluence.Clone();
          break;
        case DetailsOneofCase.OutputEventAnimationTargetCountry:
          OutputEventAnimationTargetCountry = other.OutputEventAnimationTargetCountry.Clone();
          break;
        case DetailsOneofCase.OutputEventAnimationVictoryPoints:
          OutputEventAnimationVictoryPoints = other.OutputEventAnimationVictoryPoints.Clone();
          break;
        case DetailsOneofCase.CountryDefinition:
          CountryDefinition = other.CountryDefinition.Clone();
          break;
        case DetailsOneofCase.CountryInfluence:
          CountryInfluence = other.CountryInfluence.Clone();
          break;
        case DetailsOneofCase.CardLocation:
          CardLocation = other.CardLocation.Clone();
          break;
        case DetailsOneofCase.CardInPlayStatus:
          CardInPlayStatus = other.CardInPlayStatus.Clone();
          break;
        case DetailsOneofCase.ActionRound:
          ActionRound = other.ActionRound.Clone();
          break;
        case DetailsOneofCase.PhasingPlayer:
          PhasingPlayer = other.PhasingPlayer.Clone();
          break;
        case DetailsOneofCase.TurnNumber:
          TurnNumber = other.TurnNumber.Clone();
          break;
        case DetailsOneofCase.VictoryPointTrack:
          VictoryPointTrack = other.VictoryPointTrack.Clone();
          break;
        case DetailsOneofCase.DefconLevel:
          DefconLevel = other.DefconLevel.Clone();
          break;
        case DetailsOneofCase.MilitaryOps:
          MilitaryOps = other.MilitaryOps.Clone();
          break;
        case DetailsOneofCase.SpaceRaceTrack:
          SpaceRaceTrack = other.SpaceRaceTrack.Clone();
          break;
        case DetailsOneofCase.CardsSpaced:
          CardsSpaced = other.CardsSpaced.Clone();
          break;
        case DetailsOneofCase.ChinaCard:
          ChinaCard = other.ChinaCard.Clone();
          break;
        case DetailsOneofCase.GameOver:
          GameOver = other.GameOver.Clone();
          break;
        case DetailsOneofCase.AssignSides:
          AssignSides = other.AssignSides.Clone();
          break;
        case DetailsOneofCase.Realignment:
          Realignment = other.Realignment.Clone();
          break;
        case DetailsOneofCase.PushResolveCard:
          PushResolveCard = other.PushResolveCard.Clone();
          break;
        case DetailsOneofCase.PopResolveCard:
          PopResolveCard = other.PopResolveCard.Clone();
          break;
        case DetailsOneofCase.PushRevealCard:
          PushRevealCard = other.PushRevealCard.Clone();
          break;
        case DetailsOneofCase.PopRevealCard:
          PopRevealCard = other.PopRevealCard.Clone();
          break;
        case DetailsOneofCase.SetRevealCardPlayer:
          SetRevealCardPlayer = other.SetRevealCardPlayer.Clone();
          break;
        case DetailsOneofCase.SetHeadlineCardRevealed:
          SetHeadlineCardRevealed = other.SetHeadlineCardRevealed.Clone();
          break;
        case DetailsOneofCase.LoadProgress:
          LoadProgress = other.LoadProgress.Clone();
          break;
        case DetailsOneofCase.CommitPlayerDecision:
          CommitPlayerDecision = other.CommitPlayerDecision.Clone();
          break;
        case DetailsOneofCase.CoupRoll:
          CoupRoll = other.CoupRoll.Clone();
          break;
        case DetailsOneofCase.WarRoll:
          WarRoll = other.WarRoll.Clone();
          break;
        case DetailsOneofCase.SpaceRaceRoll:
          SpaceRaceRoll = other.SpaceRaceRoll.Clone();
          break;
        case DetailsOneofCase.TrapRoll:
          TrapRoll = other.TrapRoll.Clone();
          break;
        case DetailsOneofCase.ScoringCardPlayed:
          ScoringCardPlayed = other.ScoringCardPlayed.Clone();
          break;
        case DetailsOneofCase.FinalScoring:
          FinalScoring = other.FinalScoring.Clone();
          break;
        case DetailsOneofCase.EffectRoll:
          EffectRoll = other.EffectRoll.Clone();
          break;
        case DetailsOneofCase.EndTurn:
          EndTurn = other.EndTurn.Clone();
          break;
        case DetailsOneofCase.HeadlineAnnounce:
          HeadlineAnnounce = other.HeadlineAnnounce.Clone();
          break;
        case DetailsOneofCase.Reshuffle:
          Reshuffle = other.Reshuffle.Clone();
          break;
        case DetailsOneofCase.PauseForRevealedCards:
          PauseForRevealedCards = other.PauseForRevealedCards.Clone();
          break;
        case DetailsOneofCase.TutorialAiSelectedOption:
          TutorialAiSelectedOption = other.TutorialAiSelectedOption.Clone();
          break;
        case DetailsOneofCase.BiddingResults:
          BiddingResults = other.BiddingResults.Clone();
          break;
        case DetailsOneofCase.TurnZero:
          TurnZero = other.TurnZero.Clone();
          break;
        case DetailsOneofCase.TurnZeroCrisisCard:
          TurnZeroCrisisCard = other.TurnZeroCrisisCard.Clone();
          break;
        case DetailsOneofCase.SetStatecraftCardRevealed:
          SetStatecraftCardRevealed = other.SetStatecraftCardRevealed.Clone();
          break;
        case DetailsOneofCase.CrisisCardRoll:
          CrisisCardRoll = other.CrisisCardRoll.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent Clone() {
      return new GameEvent(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "output_event_pause" field.</summary>
    public const int OutputEventPauseFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.OutputEventPause OutputEventPause {
      get { return detailsCase_ == DetailsOneofCase.OutputEventPause ? (global::Playdek.TwilightStruggle.V1.OutputEventPause) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.OutputEventPause;
      }
    }

    /// <summary>Field number for the "output_event_animation_card" field.</summary>
    public const int OutputEventAnimationCardFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.OutputEventAnimationCard OutputEventAnimationCard {
      get { return detailsCase_ == DetailsOneofCase.OutputEventAnimationCard ? (global::Playdek.TwilightStruggle.V1.OutputEventAnimationCard) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.OutputEventAnimationCard;
      }
    }

    /// <summary>Field number for the "output_event_animation_add_influence" field.</summary>
    public const int OutputEventAnimationAddInfluenceFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.OutputEventAnimationAddInfluence OutputEventAnimationAddInfluence {
      get { return detailsCase_ == DetailsOneofCase.OutputEventAnimationAddInfluence ? (global::Playdek.TwilightStruggle.V1.OutputEventAnimationAddInfluence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.OutputEventAnimationAddInfluence;
      }
    }

    /// <summary>Field number for the "output_event_animation_remove_influence" field.</summary>
    public const int OutputEventAnimationRemoveInfluenceFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.OutputEventAnimationRemoveInfluence OutputEventAnimationRemoveInfluence {
      get { return detailsCase_ == DetailsOneofCase.OutputEventAnimationRemoveInfluence ? (global::Playdek.TwilightStruggle.V1.OutputEventAnimationRemoveInfluence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.OutputEventAnimationRemoveInfluence;
      }
    }

    /// <summary>Field number for the "output_event_animation_target_country" field.</summary>
    public const int OutputEventAnimationTargetCountryFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.OutputEventAnimationTargetCountry OutputEventAnimationTargetCountry {
      get { return detailsCase_ == DetailsOneofCase.OutputEventAnimationTargetCountry ? (global::Playdek.TwilightStruggle.V1.OutputEventAnimationTargetCountry) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.OutputEventAnimationTargetCountry;
      }
    }

    /// <summary>Field number for the "output_event_animation_victory_points" field.</summary>
    public const int OutputEventAnimationVictoryPointsFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.OutputEventAnimationVictoryPoints OutputEventAnimationVictoryPoints {
      get { return detailsCase_ == DetailsOneofCase.OutputEventAnimationVictoryPoints ? (global::Playdek.TwilightStruggle.V1.OutputEventAnimationVictoryPoints) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.OutputEventAnimationVictoryPoints;
      }
    }

    /// <summary>Field number for the "country_definition" field.</summary>
    public const int CountryDefinitionFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.CountryDefinition CountryDefinition {
      get { return detailsCase_ == DetailsOneofCase.CountryDefinition ? (global::Playdek.TwilightStruggle.V1.CountryDefinition) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.CountryDefinition;
      }
    }

    /// <summary>Field number for the "country_influence" field.</summary>
    public const int CountryInfluenceFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.CountryInfluence CountryInfluence {
      get { return detailsCase_ == DetailsOneofCase.CountryInfluence ? (global::Playdek.TwilightStruggle.V1.CountryInfluence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.CountryInfluence;
      }
    }

    /// <summary>Field number for the "card_location" field.</summary>
    public const int CardLocationFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.CardLocation CardLocation {
      get { return detailsCase_ == DetailsOneofCase.CardLocation ? (global::Playdek.TwilightStruggle.V1.CardLocation) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.CardLocation;
      }
    }

    /// <summary>Field number for the "card_in_play_status" field.</summary>
    public const int CardInPlayStatusFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.CardInPlayStatus CardInPlayStatus {
      get { return detailsCase_ == DetailsOneofCase.CardInPlayStatus ? (global::Playdek.TwilightStruggle.V1.CardInPlayStatus) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.CardInPlayStatus;
      }
    }

    /// <summary>Field number for the "action_round" field.</summary>
    public const int ActionRoundFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.ActionRound ActionRound {
      get { return detailsCase_ == DetailsOneofCase.ActionRound ? (global::Playdek.TwilightStruggle.V1.ActionRound) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.ActionRound;
      }
    }

    /// <summary>Field number for the "phasing_player" field.</summary>
    public const int PhasingPlayerFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.PhasingPlayer PhasingPlayer {
      get { return detailsCase_ == DetailsOneofCase.PhasingPlayer ? (global::Playdek.TwilightStruggle.V1.PhasingPlayer) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.PhasingPlayer;
      }
    }

    /// <summary>Field number for the "turn_number" field.</summary>
    public const int TurnNumberFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.TurnNumber TurnNumber {
      get { return detailsCase_ == DetailsOneofCase.TurnNumber ? (global::Playdek.TwilightStruggle.V1.TurnNumber) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.TurnNumber;
      }
    }

    /// <summary>Field number for the "victory_point_track" field.</summary>
    public const int VictoryPointTrackFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.VictoryPointTrack VictoryPointTrack {
      get { return detailsCase_ == DetailsOneofCase.VictoryPointTrack ? (global::Playdek.TwilightStruggle.V1.VictoryPointTrack) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.VictoryPointTrack;
      }
    }

    /// <summary>Field number for the "defcon_level" field.</summary>
    public const int DefconLevelFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.DefconLevel DefconLevel {
      get { return detailsCase_ == DetailsOneofCase.DefconLevel ? (global::Playdek.TwilightStruggle.V1.DefconLevel) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.DefconLevel;
      }
    }

    /// <summary>Field number for the "military_ops" field.</summary>
    public const int MilitaryOpsFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.MilitaryOps MilitaryOps {
      get { return detailsCase_ == DetailsOneofCase.MilitaryOps ? (global::Playdek.TwilightStruggle.V1.MilitaryOps) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.MilitaryOps;
      }
    }

    /// <summary>Field number for the "space_race_track" field.</summary>
    public const int SpaceRaceTrackFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.SpaceRaceTrack SpaceRaceTrack {
      get { return detailsCase_ == DetailsOneofCase.SpaceRaceTrack ? (global::Playdek.TwilightStruggle.V1.SpaceRaceTrack) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.SpaceRaceTrack;
      }
    }

    /// <summary>Field number for the "cards_spaced" field.</summary>
    public const int CardsSpacedFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.CardsSpaced CardsSpaced {
      get { return detailsCase_ == DetailsOneofCase.CardsSpaced ? (global::Playdek.TwilightStruggle.V1.CardsSpaced) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.CardsSpaced;
      }
    }

    /// <summary>Field number for the "china_card" field.</summary>
    public const int ChinaCardFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.ChinaCard ChinaCard {
      get { return detailsCase_ == DetailsOneofCase.ChinaCard ? (global::Playdek.TwilightStruggle.V1.ChinaCard) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.ChinaCard;
      }
    }

    /// <summary>Field number for the "game_over" field.</summary>
    public const int GameOverFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.GameOver GameOver {
      get { return detailsCase_ == DetailsOneofCase.GameOver ? (global::Playdek.TwilightStruggle.V1.GameOver) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.GameOver;
      }
    }

    /// <summary>Field number for the "assign_sides" field.</summary>
    public const int AssignSidesFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.AssignSides AssignSides {
      get { return detailsCase_ == DetailsOneofCase.AssignSides ? (global::Playdek.TwilightStruggle.V1.AssignSides) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.AssignSides;
      }
    }

    /// <summary>Field number for the "realignment" field.</summary>
    public const int RealignmentFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.Realignment Realignment {
      get { return detailsCase_ == DetailsOneofCase.Realignment ? (global::Playdek.TwilightStruggle.V1.Realignment) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Realignment;
      }
    }

    /// <summary>Field number for the "push_resolve_card" field.</summary>
    public const int PushResolveCardFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.PushResolveCard PushResolveCard {
      get { return detailsCase_ == DetailsOneofCase.PushResolveCard ? (global::Playdek.TwilightStruggle.V1.PushResolveCard) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.PushResolveCard;
      }
    }

    /// <summary>Field number for the "pop_resolve_card" field.</summary>
    public const int PopResolveCardFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.PopResolveCard PopResolveCard {
      get { return detailsCase_ == DetailsOneofCase.PopResolveCard ? (global::Playdek.TwilightStruggle.V1.PopResolveCard) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.PopResolveCard;
      }
    }

    /// <summary>Field number for the "push_reveal_card" field.</summary>
    public const int PushRevealCardFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.PushRevealCard PushRevealCard {
      get { return detailsCase_ == DetailsOneofCase.PushRevealCard ? (global::Playdek.TwilightStruggle.V1.PushRevealCard) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.PushRevealCard;
      }
    }

    /// <summary>Field number for the "pop_reveal_card" field.</summary>
    public const int PopRevealCardFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.PopRevealCard PopRevealCard {
      get { return detailsCase_ == DetailsOneofCase.PopRevealCard ? (global::Playdek.TwilightStruggle.V1.PopRevealCard) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.PopRevealCard;
      }
    }

    /// <summary>Field number for the "set_reveal_card_player" field.</summary>
    public const int SetRevealCardPlayerFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.SetRevealCardPlayer SetRevealCardPlayer {
      get { return detailsCase_ == DetailsOneofCase.SetRevealCardPlayer ? (global::Playdek.TwilightStruggle.V1.SetRevealCardPlayer) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.SetRevealCardPlayer;
      }
    }

    /// <summary>Field number for the "set_headline_card_revealed" field.</summary>
    public const int SetHeadlineCardRevealedFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.SetHeadlineCardRevealed SetHeadlineCardRevealed {
      get { return detailsCase_ == DetailsOneofCase.SetHeadlineCardRevealed ? (global::Playdek.TwilightStruggle.V1.SetHeadlineCardRevealed) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.SetHeadlineCardRevealed;
      }
    }

    /// <summary>Field number for the "load_progress" field.</summary>
    public const int LoadProgressFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.LoadProgress LoadProgress {
      get { return detailsCase_ == DetailsOneofCase.LoadProgress ? (global::Playdek.TwilightStruggle.V1.LoadProgress) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.LoadProgress;
      }
    }

    /// <summary>Field number for the "commit_player_decision" field.</summary>
    public const int CommitPlayerDecisionFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.CommitPlayerDecision CommitPlayerDecision {
      get { return detailsCase_ == DetailsOneofCase.CommitPlayerDecision ? (global::Playdek.TwilightStruggle.V1.CommitPlayerDecision) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.CommitPlayerDecision;
      }
    }

    /// <summary>Field number for the "coup_roll" field.</summary>
    public const int CoupRollFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.CoupRoll CoupRoll {
      get { return detailsCase_ == DetailsOneofCase.CoupRoll ? (global::Playdek.TwilightStruggle.V1.CoupRoll) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.CoupRoll;
      }
    }

    /// <summary>Field number for the "war_roll" field.</summary>
    public const int WarRollFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.WarRoll WarRoll {
      get { return detailsCase_ == DetailsOneofCase.WarRoll ? (global::Playdek.TwilightStruggle.V1.WarRoll) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.WarRoll;
      }
    }

    /// <summary>Field number for the "space_race_roll" field.</summary>
    public const int SpaceRaceRollFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.SpaceRaceRoll SpaceRaceRoll {
      get { return detailsCase_ == DetailsOneofCase.SpaceRaceRoll ? (global::Playdek.TwilightStruggle.V1.SpaceRaceRoll) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.SpaceRaceRoll;
      }
    }

    /// <summary>Field number for the "trap_roll" field.</summary>
    public const int TrapRollFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.TrapRoll TrapRoll {
      get { return detailsCase_ == DetailsOneofCase.TrapRoll ? (global::Playdek.TwilightStruggle.V1.TrapRoll) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.TrapRoll;
      }
    }

    /// <summary>Field number for the "scoring_card_played" field.</summary>
    public const int ScoringCardPlayedFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.ScoringCardPlayed ScoringCardPlayed {
      get { return detailsCase_ == DetailsOneofCase.ScoringCardPlayed ? (global::Playdek.TwilightStruggle.V1.ScoringCardPlayed) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.ScoringCardPlayed;
      }
    }

    /// <summary>Field number for the "final_scoring" field.</summary>
    public const int FinalScoringFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.FinalScoring FinalScoring {
      get { return detailsCase_ == DetailsOneofCase.FinalScoring ? (global::Playdek.TwilightStruggle.V1.FinalScoring) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.FinalScoring;
      }
    }

    /// <summary>Field number for the "effect_roll" field.</summary>
    public const int EffectRollFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.EffectRoll EffectRoll {
      get { return detailsCase_ == DetailsOneofCase.EffectRoll ? (global::Playdek.TwilightStruggle.V1.EffectRoll) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.EffectRoll;
      }
    }

    /// <summary>Field number for the "end_turn" field.</summary>
    public const int EndTurnFieldNumber = 47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.EndTurn EndTurn {
      get { return detailsCase_ == DetailsOneofCase.EndTurn ? (global::Playdek.TwilightStruggle.V1.EndTurn) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.EndTurn;
      }
    }

    /// <summary>Field number for the "headline_announce" field.</summary>
    public const int HeadlineAnnounceFieldNumber = 48;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.HeadlineAnnounce HeadlineAnnounce {
      get { return detailsCase_ == DetailsOneofCase.HeadlineAnnounce ? (global::Playdek.TwilightStruggle.V1.HeadlineAnnounce) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.HeadlineAnnounce;
      }
    }

    /// <summary>Field number for the "reshuffle" field.</summary>
    public const int ReshuffleFieldNumber = 49;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.Reshuffle Reshuffle {
      get { return detailsCase_ == DetailsOneofCase.Reshuffle ? (global::Playdek.TwilightStruggle.V1.Reshuffle) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Reshuffle;
      }
    }

    /// <summary>Field number for the "pause_for_revealed_cards" field.</summary>
    public const int PauseForRevealedCardsFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.PauseForRevealedCards PauseForRevealedCards {
      get { return detailsCase_ == DetailsOneofCase.PauseForRevealedCards ? (global::Playdek.TwilightStruggle.V1.PauseForRevealedCards) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.PauseForRevealedCards;
      }
    }

    /// <summary>Field number for the "tutorial_ai_selected_option" field.</summary>
    public const int TutorialAiSelectedOptionFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.TutorialAISelectedOption TutorialAiSelectedOption {
      get { return detailsCase_ == DetailsOneofCase.TutorialAiSelectedOption ? (global::Playdek.TwilightStruggle.V1.TutorialAISelectedOption) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.TutorialAiSelectedOption;
      }
    }

    /// <summary>Field number for the "bidding_results" field.</summary>
    public const int BiddingResultsFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.BiddingResults BiddingResults {
      get { return detailsCase_ == DetailsOneofCase.BiddingResults ? (global::Playdek.TwilightStruggle.V1.BiddingResults) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.BiddingResults;
      }
    }

    /// <summary>Field number for the "turn_zero" field.</summary>
    public const int TurnZeroFieldNumber = 53;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.TurnZero TurnZero {
      get { return detailsCase_ == DetailsOneofCase.TurnZero ? (global::Playdek.TwilightStruggle.V1.TurnZero) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.TurnZero;
      }
    }

    /// <summary>Field number for the "turn_zero_crisis_card" field.</summary>
    public const int TurnZeroCrisisCardFieldNumber = 54;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.TurnZeroCrisisCard TurnZeroCrisisCard {
      get { return detailsCase_ == DetailsOneofCase.TurnZeroCrisisCard ? (global::Playdek.TwilightStruggle.V1.TurnZeroCrisisCard) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.TurnZeroCrisisCard;
      }
    }

    /// <summary>Field number for the "set_statecraft_card_revealed" field.</summary>
    public const int SetStatecraftCardRevealedFieldNumber = 55;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.SetStatecraftCardRevealed SetStatecraftCardRevealed {
      get { return detailsCase_ == DetailsOneofCase.SetStatecraftCardRevealed ? (global::Playdek.TwilightStruggle.V1.SetStatecraftCardRevealed) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.SetStatecraftCardRevealed;
      }
    }

    /// <summary>Field number for the "crisis_card_roll" field.</summary>
    public const int CrisisCardRollFieldNumber = 56;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Playdek.TwilightStruggle.V1.CrisisCardRoll CrisisCardRoll {
      get { return detailsCase_ == DetailsOneofCase.CrisisCardRoll ? (global::Playdek.TwilightStruggle.V1.CrisisCardRoll) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.CrisisCardRoll;
      }
    }

    private object details_;
    /// <summary>Enum of possible cases for the "details" oneof.</summary>
    public enum DetailsOneofCase {
      None = 0,
      OutputEventPause = 10,
      OutputEventAnimationCard = 11,
      OutputEventAnimationAddInfluence = 12,
      OutputEventAnimationRemoveInfluence = 13,
      OutputEventAnimationTargetCountry = 14,
      OutputEventAnimationVictoryPoints = 15,
      CountryDefinition = 16,
      CountryInfluence = 17,
      CardLocation = 18,
      CardInPlayStatus = 19,
      ActionRound = 20,
      PhasingPlayer = 21,
      TurnNumber = 22,
      VictoryPointTrack = 23,
      DefconLevel = 24,
      MilitaryOps = 25,
      SpaceRaceTrack = 26,
      CardsSpaced = 27,
      ChinaCard = 28,
      GameOver = 29,
      AssignSides = 30,
      Realignment = 31,
      PushResolveCard = 32,
      PopResolveCard = 33,
      PushRevealCard = 34,
      PopRevealCard = 35,
      SetRevealCardPlayer = 36,
      SetHeadlineCardRevealed = 37,
      LoadProgress = 38,
      CommitPlayerDecision = 39,
      CoupRoll = 40,
      WarRoll = 41,
      SpaceRaceRoll = 42,
      TrapRoll = 43,
      ScoringCardPlayed = 44,
      FinalScoring = 45,
      EffectRoll = 46,
      EndTurn = 47,
      HeadlineAnnounce = 48,
      Reshuffle = 49,
      PauseForRevealedCards = 50,
      TutorialAiSelectedOption = 51,
      BiddingResults = 52,
      TurnZero = 53,
      TurnZeroCrisisCard = 54,
      SetStatecraftCardRevealed = 55,
      CrisisCardRoll = 56,
    }
    private DetailsOneofCase detailsCase_ = DetailsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsOneofCase DetailsCase {
      get { return detailsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetails() {
      detailsCase_ = DetailsOneofCase.None;
      details_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(OutputEventPause, other.OutputEventPause)) return false;
      if (!object.Equals(OutputEventAnimationCard, other.OutputEventAnimationCard)) return false;
      if (!object.Equals(OutputEventAnimationAddInfluence, other.OutputEventAnimationAddInfluence)) return false;
      if (!object.Equals(OutputEventAnimationRemoveInfluence, other.OutputEventAnimationRemoveInfluence)) return false;
      if (!object.Equals(OutputEventAnimationTargetCountry, other.OutputEventAnimationTargetCountry)) return false;
      if (!object.Equals(OutputEventAnimationVictoryPoints, other.OutputEventAnimationVictoryPoints)) return false;
      if (!object.Equals(CountryDefinition, other.CountryDefinition)) return false;
      if (!object.Equals(CountryInfluence, other.CountryInfluence)) return false;
      if (!object.Equals(CardLocation, other.CardLocation)) return false;
      if (!object.Equals(CardInPlayStatus, other.CardInPlayStatus)) return false;
      if (!object.Equals(ActionRound, other.ActionRound)) return false;
      if (!object.Equals(PhasingPlayer, other.PhasingPlayer)) return false;
      if (!object.Equals(TurnNumber, other.TurnNumber)) return false;
      if (!object.Equals(VictoryPointTrack, other.VictoryPointTrack)) return false;
      if (!object.Equals(DefconLevel, other.DefconLevel)) return false;
      if (!object.Equals(MilitaryOps, other.MilitaryOps)) return false;
      if (!object.Equals(SpaceRaceTrack, other.SpaceRaceTrack)) return false;
      if (!object.Equals(CardsSpaced, other.CardsSpaced)) return false;
      if (!object.Equals(ChinaCard, other.ChinaCard)) return false;
      if (!object.Equals(GameOver, other.GameOver)) return false;
      if (!object.Equals(AssignSides, other.AssignSides)) return false;
      if (!object.Equals(Realignment, other.Realignment)) return false;
      if (!object.Equals(PushResolveCard, other.PushResolveCard)) return false;
      if (!object.Equals(PopResolveCard, other.PopResolveCard)) return false;
      if (!object.Equals(PushRevealCard, other.PushRevealCard)) return false;
      if (!object.Equals(PopRevealCard, other.PopRevealCard)) return false;
      if (!object.Equals(SetRevealCardPlayer, other.SetRevealCardPlayer)) return false;
      if (!object.Equals(SetHeadlineCardRevealed, other.SetHeadlineCardRevealed)) return false;
      if (!object.Equals(LoadProgress, other.LoadProgress)) return false;
      if (!object.Equals(CommitPlayerDecision, other.CommitPlayerDecision)) return false;
      if (!object.Equals(CoupRoll, other.CoupRoll)) return false;
      if (!object.Equals(WarRoll, other.WarRoll)) return false;
      if (!object.Equals(SpaceRaceRoll, other.SpaceRaceRoll)) return false;
      if (!object.Equals(TrapRoll, other.TrapRoll)) return false;
      if (!object.Equals(ScoringCardPlayed, other.ScoringCardPlayed)) return false;
      if (!object.Equals(FinalScoring, other.FinalScoring)) return false;
      if (!object.Equals(EffectRoll, other.EffectRoll)) return false;
      if (!object.Equals(EndTurn, other.EndTurn)) return false;
      if (!object.Equals(HeadlineAnnounce, other.HeadlineAnnounce)) return false;
      if (!object.Equals(Reshuffle, other.Reshuffle)) return false;
      if (!object.Equals(PauseForRevealedCards, other.PauseForRevealedCards)) return false;
      if (!object.Equals(TutorialAiSelectedOption, other.TutorialAiSelectedOption)) return false;
      if (!object.Equals(BiddingResults, other.BiddingResults)) return false;
      if (!object.Equals(TurnZero, other.TurnZero)) return false;
      if (!object.Equals(TurnZeroCrisisCard, other.TurnZeroCrisisCard)) return false;
      if (!object.Equals(SetStatecraftCardRevealed, other.SetStatecraftCardRevealed)) return false;
      if (!object.Equals(CrisisCardRoll, other.CrisisCardRoll)) return false;
      if (DetailsCase != other.DetailsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.OutputEventPause) hash ^= OutputEventPause.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationCard) hash ^= OutputEventAnimationCard.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationAddInfluence) hash ^= OutputEventAnimationAddInfluence.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationRemoveInfluence) hash ^= OutputEventAnimationRemoveInfluence.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationTargetCountry) hash ^= OutputEventAnimationTargetCountry.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationVictoryPoints) hash ^= OutputEventAnimationVictoryPoints.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.CountryDefinition) hash ^= CountryDefinition.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.CountryInfluence) hash ^= CountryInfluence.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.CardLocation) hash ^= CardLocation.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.CardInPlayStatus) hash ^= CardInPlayStatus.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.ActionRound) hash ^= ActionRound.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.PhasingPlayer) hash ^= PhasingPlayer.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.TurnNumber) hash ^= TurnNumber.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.VictoryPointTrack) hash ^= VictoryPointTrack.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.DefconLevel) hash ^= DefconLevel.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.MilitaryOps) hash ^= MilitaryOps.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.SpaceRaceTrack) hash ^= SpaceRaceTrack.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.CardsSpaced) hash ^= CardsSpaced.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.ChinaCard) hash ^= ChinaCard.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.GameOver) hash ^= GameOver.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.AssignSides) hash ^= AssignSides.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Realignment) hash ^= Realignment.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.PushResolveCard) hash ^= PushResolveCard.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.PopResolveCard) hash ^= PopResolveCard.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.PushRevealCard) hash ^= PushRevealCard.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.PopRevealCard) hash ^= PopRevealCard.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.SetRevealCardPlayer) hash ^= SetRevealCardPlayer.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.SetHeadlineCardRevealed) hash ^= SetHeadlineCardRevealed.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.LoadProgress) hash ^= LoadProgress.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.CommitPlayerDecision) hash ^= CommitPlayerDecision.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.CoupRoll) hash ^= CoupRoll.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.WarRoll) hash ^= WarRoll.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.SpaceRaceRoll) hash ^= SpaceRaceRoll.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.TrapRoll) hash ^= TrapRoll.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.ScoringCardPlayed) hash ^= ScoringCardPlayed.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.FinalScoring) hash ^= FinalScoring.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.EffectRoll) hash ^= EffectRoll.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.EndTurn) hash ^= EndTurn.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.HeadlineAnnounce) hash ^= HeadlineAnnounce.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Reshuffle) hash ^= Reshuffle.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.PauseForRevealedCards) hash ^= PauseForRevealedCards.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.TutorialAiSelectedOption) hash ^= TutorialAiSelectedOption.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.BiddingResults) hash ^= BiddingResults.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.TurnZero) hash ^= TurnZero.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.TurnZeroCrisisCard) hash ^= TurnZeroCrisisCard.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.SetStatecraftCardRevealed) hash ^= SetStatecraftCardRevealed.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.CrisisCardRoll) hash ^= CrisisCardRoll.GetHashCode();
      hash ^= (int) detailsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventPause) {
        output.WriteRawTag(82);
        output.WriteMessage(OutputEventPause);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationCard) {
        output.WriteRawTag(90);
        output.WriteMessage(OutputEventAnimationCard);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationAddInfluence) {
        output.WriteRawTag(98);
        output.WriteMessage(OutputEventAnimationAddInfluence);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationRemoveInfluence) {
        output.WriteRawTag(106);
        output.WriteMessage(OutputEventAnimationRemoveInfluence);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationTargetCountry) {
        output.WriteRawTag(114);
        output.WriteMessage(OutputEventAnimationTargetCountry);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationVictoryPoints) {
        output.WriteRawTag(122);
        output.WriteMessage(OutputEventAnimationVictoryPoints);
      }
      if (detailsCase_ == DetailsOneofCase.CountryDefinition) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(CountryDefinition);
      }
      if (detailsCase_ == DetailsOneofCase.CountryInfluence) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(CountryInfluence);
      }
      if (detailsCase_ == DetailsOneofCase.CardLocation) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CardLocation);
      }
      if (detailsCase_ == DetailsOneofCase.CardInPlayStatus) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CardInPlayStatus);
      }
      if (detailsCase_ == DetailsOneofCase.ActionRound) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ActionRound);
      }
      if (detailsCase_ == DetailsOneofCase.PhasingPlayer) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(PhasingPlayer);
      }
      if (detailsCase_ == DetailsOneofCase.TurnNumber) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(TurnNumber);
      }
      if (detailsCase_ == DetailsOneofCase.VictoryPointTrack) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(VictoryPointTrack);
      }
      if (detailsCase_ == DetailsOneofCase.DefconLevel) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(DefconLevel);
      }
      if (detailsCase_ == DetailsOneofCase.MilitaryOps) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MilitaryOps);
      }
      if (detailsCase_ == DetailsOneofCase.SpaceRaceTrack) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(SpaceRaceTrack);
      }
      if (detailsCase_ == DetailsOneofCase.CardsSpaced) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(CardsSpaced);
      }
      if (detailsCase_ == DetailsOneofCase.ChinaCard) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(ChinaCard);
      }
      if (detailsCase_ == DetailsOneofCase.GameOver) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(GameOver);
      }
      if (detailsCase_ == DetailsOneofCase.AssignSides) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(AssignSides);
      }
      if (detailsCase_ == DetailsOneofCase.Realignment) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Realignment);
      }
      if (detailsCase_ == DetailsOneofCase.PushResolveCard) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(PushResolveCard);
      }
      if (detailsCase_ == DetailsOneofCase.PopResolveCard) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(PopResolveCard);
      }
      if (detailsCase_ == DetailsOneofCase.PushRevealCard) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(PushRevealCard);
      }
      if (detailsCase_ == DetailsOneofCase.PopRevealCard) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(PopRevealCard);
      }
      if (detailsCase_ == DetailsOneofCase.SetRevealCardPlayer) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(SetRevealCardPlayer);
      }
      if (detailsCase_ == DetailsOneofCase.SetHeadlineCardRevealed) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(SetHeadlineCardRevealed);
      }
      if (detailsCase_ == DetailsOneofCase.LoadProgress) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(LoadProgress);
      }
      if (detailsCase_ == DetailsOneofCase.CommitPlayerDecision) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(CommitPlayerDecision);
      }
      if (detailsCase_ == DetailsOneofCase.CoupRoll) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(CoupRoll);
      }
      if (detailsCase_ == DetailsOneofCase.WarRoll) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(WarRoll);
      }
      if (detailsCase_ == DetailsOneofCase.SpaceRaceRoll) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(SpaceRaceRoll);
      }
      if (detailsCase_ == DetailsOneofCase.TrapRoll) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(TrapRoll);
      }
      if (detailsCase_ == DetailsOneofCase.ScoringCardPlayed) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(ScoringCardPlayed);
      }
      if (detailsCase_ == DetailsOneofCase.FinalScoring) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(FinalScoring);
      }
      if (detailsCase_ == DetailsOneofCase.EffectRoll) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(EffectRoll);
      }
      if (detailsCase_ == DetailsOneofCase.EndTurn) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(EndTurn);
      }
      if (detailsCase_ == DetailsOneofCase.HeadlineAnnounce) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(HeadlineAnnounce);
      }
      if (detailsCase_ == DetailsOneofCase.Reshuffle) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(Reshuffle);
      }
      if (detailsCase_ == DetailsOneofCase.PauseForRevealedCards) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(PauseForRevealedCards);
      }
      if (detailsCase_ == DetailsOneofCase.TutorialAiSelectedOption) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(TutorialAiSelectedOption);
      }
      if (detailsCase_ == DetailsOneofCase.BiddingResults) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(BiddingResults);
      }
      if (detailsCase_ == DetailsOneofCase.TurnZero) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(TurnZero);
      }
      if (detailsCase_ == DetailsOneofCase.TurnZeroCrisisCard) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(TurnZeroCrisisCard);
      }
      if (detailsCase_ == DetailsOneofCase.SetStatecraftCardRevealed) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(SetStatecraftCardRevealed);
      }
      if (detailsCase_ == DetailsOneofCase.CrisisCardRoll) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(CrisisCardRoll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventPause) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputEventPause);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputEventAnimationCard);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationAddInfluence) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputEventAnimationAddInfluence);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationRemoveInfluence) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputEventAnimationRemoveInfluence);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationTargetCountry) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputEventAnimationTargetCountry);
      }
      if (detailsCase_ == DetailsOneofCase.OutputEventAnimationVictoryPoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputEventAnimationVictoryPoints);
      }
      if (detailsCase_ == DetailsOneofCase.CountryDefinition) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CountryDefinition);
      }
      if (detailsCase_ == DetailsOneofCase.CountryInfluence) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CountryInfluence);
      }
      if (detailsCase_ == DetailsOneofCase.CardLocation) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardLocation);
      }
      if (detailsCase_ == DetailsOneofCase.CardInPlayStatus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardInPlayStatus);
      }
      if (detailsCase_ == DetailsOneofCase.ActionRound) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActionRound);
      }
      if (detailsCase_ == DetailsOneofCase.PhasingPlayer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PhasingPlayer);
      }
      if (detailsCase_ == DetailsOneofCase.TurnNumber) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurnNumber);
      }
      if (detailsCase_ == DetailsOneofCase.VictoryPointTrack) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VictoryPointTrack);
      }
      if (detailsCase_ == DetailsOneofCase.DefconLevel) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DefconLevel);
      }
      if (detailsCase_ == DetailsOneofCase.MilitaryOps) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MilitaryOps);
      }
      if (detailsCase_ == DetailsOneofCase.SpaceRaceTrack) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpaceRaceTrack);
      }
      if (detailsCase_ == DetailsOneofCase.CardsSpaced) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardsSpaced);
      }
      if (detailsCase_ == DetailsOneofCase.ChinaCard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChinaCard);
      }
      if (detailsCase_ == DetailsOneofCase.GameOver) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameOver);
      }
      if (detailsCase_ == DetailsOneofCase.AssignSides) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AssignSides);
      }
      if (detailsCase_ == DetailsOneofCase.Realignment) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Realignment);
      }
      if (detailsCase_ == DetailsOneofCase.PushResolveCard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PushResolveCard);
      }
      if (detailsCase_ == DetailsOneofCase.PopResolveCard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PopResolveCard);
      }
      if (detailsCase_ == DetailsOneofCase.PushRevealCard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PushRevealCard);
      }
      if (detailsCase_ == DetailsOneofCase.PopRevealCard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PopRevealCard);
      }
      if (detailsCase_ == DetailsOneofCase.SetRevealCardPlayer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetRevealCardPlayer);
      }
      if (detailsCase_ == DetailsOneofCase.SetHeadlineCardRevealed) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetHeadlineCardRevealed);
      }
      if (detailsCase_ == DetailsOneofCase.LoadProgress) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoadProgress);
      }
      if (detailsCase_ == DetailsOneofCase.CommitPlayerDecision) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommitPlayerDecision);
      }
      if (detailsCase_ == DetailsOneofCase.CoupRoll) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CoupRoll);
      }
      if (detailsCase_ == DetailsOneofCase.WarRoll) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WarRoll);
      }
      if (detailsCase_ == DetailsOneofCase.SpaceRaceRoll) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpaceRaceRoll);
      }
      if (detailsCase_ == DetailsOneofCase.TrapRoll) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrapRoll);
      }
      if (detailsCase_ == DetailsOneofCase.ScoringCardPlayed) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScoringCardPlayed);
      }
      if (detailsCase_ == DetailsOneofCase.FinalScoring) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FinalScoring);
      }
      if (detailsCase_ == DetailsOneofCase.EffectRoll) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EffectRoll);
      }
      if (detailsCase_ == DetailsOneofCase.EndTurn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EndTurn);
      }
      if (detailsCase_ == DetailsOneofCase.HeadlineAnnounce) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeadlineAnnounce);
      }
      if (detailsCase_ == DetailsOneofCase.Reshuffle) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Reshuffle);
      }
      if (detailsCase_ == DetailsOneofCase.PauseForRevealedCards) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseForRevealedCards);
      }
      if (detailsCase_ == DetailsOneofCase.TutorialAiSelectedOption) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TutorialAiSelectedOption);
      }
      if (detailsCase_ == DetailsOneofCase.BiddingResults) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BiddingResults);
      }
      if (detailsCase_ == DetailsOneofCase.TurnZero) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurnZero);
      }
      if (detailsCase_ == DetailsOneofCase.TurnZeroCrisisCard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurnZeroCrisisCard);
      }
      if (detailsCase_ == DetailsOneofCase.SetStatecraftCardRevealed) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetStatecraftCardRevealed);
      }
      if (detailsCase_ == DetailsOneofCase.CrisisCardRoll) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CrisisCardRoll);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEvent other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      switch (other.DetailsCase) {
        case DetailsOneofCase.OutputEventPause:
          if (OutputEventPause == null) {
            OutputEventPause = new global::Playdek.TwilightStruggle.V1.OutputEventPause();
          }
          OutputEventPause.MergeFrom(other.OutputEventPause);
          break;
        case DetailsOneofCase.OutputEventAnimationCard:
          if (OutputEventAnimationCard == null) {
            OutputEventAnimationCard = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationCard();
          }
          OutputEventAnimationCard.MergeFrom(other.OutputEventAnimationCard);
          break;
        case DetailsOneofCase.OutputEventAnimationAddInfluence:
          if (OutputEventAnimationAddInfluence == null) {
            OutputEventAnimationAddInfluence = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationAddInfluence();
          }
          OutputEventAnimationAddInfluence.MergeFrom(other.OutputEventAnimationAddInfluence);
          break;
        case DetailsOneofCase.OutputEventAnimationRemoveInfluence:
          if (OutputEventAnimationRemoveInfluence == null) {
            OutputEventAnimationRemoveInfluence = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationRemoveInfluence();
          }
          OutputEventAnimationRemoveInfluence.MergeFrom(other.OutputEventAnimationRemoveInfluence);
          break;
        case DetailsOneofCase.OutputEventAnimationTargetCountry:
          if (OutputEventAnimationTargetCountry == null) {
            OutputEventAnimationTargetCountry = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationTargetCountry();
          }
          OutputEventAnimationTargetCountry.MergeFrom(other.OutputEventAnimationTargetCountry);
          break;
        case DetailsOneofCase.OutputEventAnimationVictoryPoints:
          if (OutputEventAnimationVictoryPoints == null) {
            OutputEventAnimationVictoryPoints = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationVictoryPoints();
          }
          OutputEventAnimationVictoryPoints.MergeFrom(other.OutputEventAnimationVictoryPoints);
          break;
        case DetailsOneofCase.CountryDefinition:
          if (CountryDefinition == null) {
            CountryDefinition = new global::Playdek.TwilightStruggle.V1.CountryDefinition();
          }
          CountryDefinition.MergeFrom(other.CountryDefinition);
          break;
        case DetailsOneofCase.CountryInfluence:
          if (CountryInfluence == null) {
            CountryInfluence = new global::Playdek.TwilightStruggle.V1.CountryInfluence();
          }
          CountryInfluence.MergeFrom(other.CountryInfluence);
          break;
        case DetailsOneofCase.CardLocation:
          if (CardLocation == null) {
            CardLocation = new global::Playdek.TwilightStruggle.V1.CardLocation();
          }
          CardLocation.MergeFrom(other.CardLocation);
          break;
        case DetailsOneofCase.CardInPlayStatus:
          if (CardInPlayStatus == null) {
            CardInPlayStatus = new global::Playdek.TwilightStruggle.V1.CardInPlayStatus();
          }
          CardInPlayStatus.MergeFrom(other.CardInPlayStatus);
          break;
        case DetailsOneofCase.ActionRound:
          if (ActionRound == null) {
            ActionRound = new global::Playdek.TwilightStruggle.V1.ActionRound();
          }
          ActionRound.MergeFrom(other.ActionRound);
          break;
        case DetailsOneofCase.PhasingPlayer:
          if (PhasingPlayer == null) {
            PhasingPlayer = new global::Playdek.TwilightStruggle.V1.PhasingPlayer();
          }
          PhasingPlayer.MergeFrom(other.PhasingPlayer);
          break;
        case DetailsOneofCase.TurnNumber:
          if (TurnNumber == null) {
            TurnNumber = new global::Playdek.TwilightStruggle.V1.TurnNumber();
          }
          TurnNumber.MergeFrom(other.TurnNumber);
          break;
        case DetailsOneofCase.VictoryPointTrack:
          if (VictoryPointTrack == null) {
            VictoryPointTrack = new global::Playdek.TwilightStruggle.V1.VictoryPointTrack();
          }
          VictoryPointTrack.MergeFrom(other.VictoryPointTrack);
          break;
        case DetailsOneofCase.DefconLevel:
          if (DefconLevel == null) {
            DefconLevel = new global::Playdek.TwilightStruggle.V1.DefconLevel();
          }
          DefconLevel.MergeFrom(other.DefconLevel);
          break;
        case DetailsOneofCase.MilitaryOps:
          if (MilitaryOps == null) {
            MilitaryOps = new global::Playdek.TwilightStruggle.V1.MilitaryOps();
          }
          MilitaryOps.MergeFrom(other.MilitaryOps);
          break;
        case DetailsOneofCase.SpaceRaceTrack:
          if (SpaceRaceTrack == null) {
            SpaceRaceTrack = new global::Playdek.TwilightStruggle.V1.SpaceRaceTrack();
          }
          SpaceRaceTrack.MergeFrom(other.SpaceRaceTrack);
          break;
        case DetailsOneofCase.CardsSpaced:
          if (CardsSpaced == null) {
            CardsSpaced = new global::Playdek.TwilightStruggle.V1.CardsSpaced();
          }
          CardsSpaced.MergeFrom(other.CardsSpaced);
          break;
        case DetailsOneofCase.ChinaCard:
          if (ChinaCard == null) {
            ChinaCard = new global::Playdek.TwilightStruggle.V1.ChinaCard();
          }
          ChinaCard.MergeFrom(other.ChinaCard);
          break;
        case DetailsOneofCase.GameOver:
          if (GameOver == null) {
            GameOver = new global::Playdek.TwilightStruggle.V1.GameOver();
          }
          GameOver.MergeFrom(other.GameOver);
          break;
        case DetailsOneofCase.AssignSides:
          if (AssignSides == null) {
            AssignSides = new global::Playdek.TwilightStruggle.V1.AssignSides();
          }
          AssignSides.MergeFrom(other.AssignSides);
          break;
        case DetailsOneofCase.Realignment:
          if (Realignment == null) {
            Realignment = new global::Playdek.TwilightStruggle.V1.Realignment();
          }
          Realignment.MergeFrom(other.Realignment);
          break;
        case DetailsOneofCase.PushResolveCard:
          if (PushResolveCard == null) {
            PushResolveCard = new global::Playdek.TwilightStruggle.V1.PushResolveCard();
          }
          PushResolveCard.MergeFrom(other.PushResolveCard);
          break;
        case DetailsOneofCase.PopResolveCard:
          if (PopResolveCard == null) {
            PopResolveCard = new global::Playdek.TwilightStruggle.V1.PopResolveCard();
          }
          PopResolveCard.MergeFrom(other.PopResolveCard);
          break;
        case DetailsOneofCase.PushRevealCard:
          if (PushRevealCard == null) {
            PushRevealCard = new global::Playdek.TwilightStruggle.V1.PushRevealCard();
          }
          PushRevealCard.MergeFrom(other.PushRevealCard);
          break;
        case DetailsOneofCase.PopRevealCard:
          if (PopRevealCard == null) {
            PopRevealCard = new global::Playdek.TwilightStruggle.V1.PopRevealCard();
          }
          PopRevealCard.MergeFrom(other.PopRevealCard);
          break;
        case DetailsOneofCase.SetRevealCardPlayer:
          if (SetRevealCardPlayer == null) {
            SetRevealCardPlayer = new global::Playdek.TwilightStruggle.V1.SetRevealCardPlayer();
          }
          SetRevealCardPlayer.MergeFrom(other.SetRevealCardPlayer);
          break;
        case DetailsOneofCase.SetHeadlineCardRevealed:
          if (SetHeadlineCardRevealed == null) {
            SetHeadlineCardRevealed = new global::Playdek.TwilightStruggle.V1.SetHeadlineCardRevealed();
          }
          SetHeadlineCardRevealed.MergeFrom(other.SetHeadlineCardRevealed);
          break;
        case DetailsOneofCase.LoadProgress:
          if (LoadProgress == null) {
            LoadProgress = new global::Playdek.TwilightStruggle.V1.LoadProgress();
          }
          LoadProgress.MergeFrom(other.LoadProgress);
          break;
        case DetailsOneofCase.CommitPlayerDecision:
          if (CommitPlayerDecision == null) {
            CommitPlayerDecision = new global::Playdek.TwilightStruggle.V1.CommitPlayerDecision();
          }
          CommitPlayerDecision.MergeFrom(other.CommitPlayerDecision);
          break;
        case DetailsOneofCase.CoupRoll:
          if (CoupRoll == null) {
            CoupRoll = new global::Playdek.TwilightStruggle.V1.CoupRoll();
          }
          CoupRoll.MergeFrom(other.CoupRoll);
          break;
        case DetailsOneofCase.WarRoll:
          if (WarRoll == null) {
            WarRoll = new global::Playdek.TwilightStruggle.V1.WarRoll();
          }
          WarRoll.MergeFrom(other.WarRoll);
          break;
        case DetailsOneofCase.SpaceRaceRoll:
          if (SpaceRaceRoll == null) {
            SpaceRaceRoll = new global::Playdek.TwilightStruggle.V1.SpaceRaceRoll();
          }
          SpaceRaceRoll.MergeFrom(other.SpaceRaceRoll);
          break;
        case DetailsOneofCase.TrapRoll:
          if (TrapRoll == null) {
            TrapRoll = new global::Playdek.TwilightStruggle.V1.TrapRoll();
          }
          TrapRoll.MergeFrom(other.TrapRoll);
          break;
        case DetailsOneofCase.ScoringCardPlayed:
          if (ScoringCardPlayed == null) {
            ScoringCardPlayed = new global::Playdek.TwilightStruggle.V1.ScoringCardPlayed();
          }
          ScoringCardPlayed.MergeFrom(other.ScoringCardPlayed);
          break;
        case DetailsOneofCase.FinalScoring:
          if (FinalScoring == null) {
            FinalScoring = new global::Playdek.TwilightStruggle.V1.FinalScoring();
          }
          FinalScoring.MergeFrom(other.FinalScoring);
          break;
        case DetailsOneofCase.EffectRoll:
          if (EffectRoll == null) {
            EffectRoll = new global::Playdek.TwilightStruggle.V1.EffectRoll();
          }
          EffectRoll.MergeFrom(other.EffectRoll);
          break;
        case DetailsOneofCase.EndTurn:
          if (EndTurn == null) {
            EndTurn = new global::Playdek.TwilightStruggle.V1.EndTurn();
          }
          EndTurn.MergeFrom(other.EndTurn);
          break;
        case DetailsOneofCase.HeadlineAnnounce:
          if (HeadlineAnnounce == null) {
            HeadlineAnnounce = new global::Playdek.TwilightStruggle.V1.HeadlineAnnounce();
          }
          HeadlineAnnounce.MergeFrom(other.HeadlineAnnounce);
          break;
        case DetailsOneofCase.Reshuffle:
          if (Reshuffle == null) {
            Reshuffle = new global::Playdek.TwilightStruggle.V1.Reshuffle();
          }
          Reshuffle.MergeFrom(other.Reshuffle);
          break;
        case DetailsOneofCase.PauseForRevealedCards:
          if (PauseForRevealedCards == null) {
            PauseForRevealedCards = new global::Playdek.TwilightStruggle.V1.PauseForRevealedCards();
          }
          PauseForRevealedCards.MergeFrom(other.PauseForRevealedCards);
          break;
        case DetailsOneofCase.TutorialAiSelectedOption:
          if (TutorialAiSelectedOption == null) {
            TutorialAiSelectedOption = new global::Playdek.TwilightStruggle.V1.TutorialAISelectedOption();
          }
          TutorialAiSelectedOption.MergeFrom(other.TutorialAiSelectedOption);
          break;
        case DetailsOneofCase.BiddingResults:
          if (BiddingResults == null) {
            BiddingResults = new global::Playdek.TwilightStruggle.V1.BiddingResults();
          }
          BiddingResults.MergeFrom(other.BiddingResults);
          break;
        case DetailsOneofCase.TurnZero:
          if (TurnZero == null) {
            TurnZero = new global::Playdek.TwilightStruggle.V1.TurnZero();
          }
          TurnZero.MergeFrom(other.TurnZero);
          break;
        case DetailsOneofCase.TurnZeroCrisisCard:
          if (TurnZeroCrisisCard == null) {
            TurnZeroCrisisCard = new global::Playdek.TwilightStruggle.V1.TurnZeroCrisisCard();
          }
          TurnZeroCrisisCard.MergeFrom(other.TurnZeroCrisisCard);
          break;
        case DetailsOneofCase.SetStatecraftCardRevealed:
          if (SetStatecraftCardRevealed == null) {
            SetStatecraftCardRevealed = new global::Playdek.TwilightStruggle.V1.SetStatecraftCardRevealed();
          }
          SetStatecraftCardRevealed.MergeFrom(other.SetStatecraftCardRevealed);
          break;
        case DetailsOneofCase.CrisisCardRoll:
          if (CrisisCardRoll == null) {
            CrisisCardRoll = new global::Playdek.TwilightStruggle.V1.CrisisCardRoll();
          }
          CrisisCardRoll.MergeFrom(other.CrisisCardRoll);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 82: {
            global::Playdek.TwilightStruggle.V1.OutputEventPause subBuilder = new global::Playdek.TwilightStruggle.V1.OutputEventPause();
            if (detailsCase_ == DetailsOneofCase.OutputEventPause) {
              subBuilder.MergeFrom(OutputEventPause);
            }
            input.ReadMessage(subBuilder);
            OutputEventPause = subBuilder;
            break;
          }
          case 90: {
            global::Playdek.TwilightStruggle.V1.OutputEventAnimationCard subBuilder = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationCard();
            if (detailsCase_ == DetailsOneofCase.OutputEventAnimationCard) {
              subBuilder.MergeFrom(OutputEventAnimationCard);
            }
            input.ReadMessage(subBuilder);
            OutputEventAnimationCard = subBuilder;
            break;
          }
          case 98: {
            global::Playdek.TwilightStruggle.V1.OutputEventAnimationAddInfluence subBuilder = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationAddInfluence();
            if (detailsCase_ == DetailsOneofCase.OutputEventAnimationAddInfluence) {
              subBuilder.MergeFrom(OutputEventAnimationAddInfluence);
            }
            input.ReadMessage(subBuilder);
            OutputEventAnimationAddInfluence = subBuilder;
            break;
          }
          case 106: {
            global::Playdek.TwilightStruggle.V1.OutputEventAnimationRemoveInfluence subBuilder = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationRemoveInfluence();
            if (detailsCase_ == DetailsOneofCase.OutputEventAnimationRemoveInfluence) {
              subBuilder.MergeFrom(OutputEventAnimationRemoveInfluence);
            }
            input.ReadMessage(subBuilder);
            OutputEventAnimationRemoveInfluence = subBuilder;
            break;
          }
          case 114: {
            global::Playdek.TwilightStruggle.V1.OutputEventAnimationTargetCountry subBuilder = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationTargetCountry();
            if (detailsCase_ == DetailsOneofCase.OutputEventAnimationTargetCountry) {
              subBuilder.MergeFrom(OutputEventAnimationTargetCountry);
            }
            input.ReadMessage(subBuilder);
            OutputEventAnimationTargetCountry = subBuilder;
            break;
          }
          case 122: {
            global::Playdek.TwilightStruggle.V1.OutputEventAnimationVictoryPoints subBuilder = new global::Playdek.TwilightStruggle.V1.OutputEventAnimationVictoryPoints();
            if (detailsCase_ == DetailsOneofCase.OutputEventAnimationVictoryPoints) {
              subBuilder.MergeFrom(OutputEventAnimationVictoryPoints);
            }
            input.ReadMessage(subBuilder);
            OutputEventAnimationVictoryPoints = subBuilder;
            break;
          }
          case 130: {
            global::Playdek.TwilightStruggle.V1.CountryDefinition subBuilder = new global::Playdek.TwilightStruggle.V1.CountryDefinition();
            if (detailsCase_ == DetailsOneofCase.CountryDefinition) {
              subBuilder.MergeFrom(CountryDefinition);
            }
            input.ReadMessage(subBuilder);
            CountryDefinition = subBuilder;
            break;
          }
          case 138: {
            global::Playdek.TwilightStruggle.V1.CountryInfluence subBuilder = new global::Playdek.TwilightStruggle.V1.CountryInfluence();
            if (detailsCase_ == DetailsOneofCase.CountryInfluence) {
              subBuilder.MergeFrom(CountryInfluence);
            }
            input.ReadMessage(subBuilder);
            CountryInfluence = subBuilder;
            break;
          }
          case 146: {
            global::Playdek.TwilightStruggle.V1.CardLocation subBuilder = new global::Playdek.TwilightStruggle.V1.CardLocation();
            if (detailsCase_ == DetailsOneofCase.CardLocation) {
              subBuilder.MergeFrom(CardLocation);
            }
            input.ReadMessage(subBuilder);
            CardLocation = subBuilder;
            break;
          }
          case 154: {
            global::Playdek.TwilightStruggle.V1.CardInPlayStatus subBuilder = new global::Playdek.TwilightStruggle.V1.CardInPlayStatus();
            if (detailsCase_ == DetailsOneofCase.CardInPlayStatus) {
              subBuilder.MergeFrom(CardInPlayStatus);
            }
            input.ReadMessage(subBuilder);
            CardInPlayStatus = subBuilder;
            break;
          }
          case 162: {
            global::Playdek.TwilightStruggle.V1.ActionRound subBuilder = new global::Playdek.TwilightStruggle.V1.ActionRound();
            if (detailsCase_ == DetailsOneofCase.ActionRound) {
              subBuilder.MergeFrom(ActionRound);
            }
            input.ReadMessage(subBuilder);
            ActionRound = subBuilder;
            break;
          }
          case 170: {
            global::Playdek.TwilightStruggle.V1.PhasingPlayer subBuilder = new global::Playdek.TwilightStruggle.V1.PhasingPlayer();
            if (detailsCase_ == DetailsOneofCase.PhasingPlayer) {
              subBuilder.MergeFrom(PhasingPlayer);
            }
            input.ReadMessage(subBuilder);
            PhasingPlayer = subBuilder;
            break;
          }
          case 178: {
            global::Playdek.TwilightStruggle.V1.TurnNumber subBuilder = new global::Playdek.TwilightStruggle.V1.TurnNumber();
            if (detailsCase_ == DetailsOneofCase.TurnNumber) {
              subBuilder.MergeFrom(TurnNumber);
            }
            input.ReadMessage(subBuilder);
            TurnNumber = subBuilder;
            break;
          }
          case 186: {
            global::Playdek.TwilightStruggle.V1.VictoryPointTrack subBuilder = new global::Playdek.TwilightStruggle.V1.VictoryPointTrack();
            if (detailsCase_ == DetailsOneofCase.VictoryPointTrack) {
              subBuilder.MergeFrom(VictoryPointTrack);
            }
            input.ReadMessage(subBuilder);
            VictoryPointTrack = subBuilder;
            break;
          }
          case 194: {
            global::Playdek.TwilightStruggle.V1.DefconLevel subBuilder = new global::Playdek.TwilightStruggle.V1.DefconLevel();
            if (detailsCase_ == DetailsOneofCase.DefconLevel) {
              subBuilder.MergeFrom(DefconLevel);
            }
            input.ReadMessage(subBuilder);
            DefconLevel = subBuilder;
            break;
          }
          case 202: {
            global::Playdek.TwilightStruggle.V1.MilitaryOps subBuilder = new global::Playdek.TwilightStruggle.V1.MilitaryOps();
            if (detailsCase_ == DetailsOneofCase.MilitaryOps) {
              subBuilder.MergeFrom(MilitaryOps);
            }
            input.ReadMessage(subBuilder);
            MilitaryOps = subBuilder;
            break;
          }
          case 210: {
            global::Playdek.TwilightStruggle.V1.SpaceRaceTrack subBuilder = new global::Playdek.TwilightStruggle.V1.SpaceRaceTrack();
            if (detailsCase_ == DetailsOneofCase.SpaceRaceTrack) {
              subBuilder.MergeFrom(SpaceRaceTrack);
            }
            input.ReadMessage(subBuilder);
            SpaceRaceTrack = subBuilder;
            break;
          }
          case 218: {
            global::Playdek.TwilightStruggle.V1.CardsSpaced subBuilder = new global::Playdek.TwilightStruggle.V1.CardsSpaced();
            if (detailsCase_ == DetailsOneofCase.CardsSpaced) {
              subBuilder.MergeFrom(CardsSpaced);
            }
            input.ReadMessage(subBuilder);
            CardsSpaced = subBuilder;
            break;
          }
          case 226: {
            global::Playdek.TwilightStruggle.V1.ChinaCard subBuilder = new global::Playdek.TwilightStruggle.V1.ChinaCard();
            if (detailsCase_ == DetailsOneofCase.ChinaCard) {
              subBuilder.MergeFrom(ChinaCard);
            }
            input.ReadMessage(subBuilder);
            ChinaCard = subBuilder;
            break;
          }
          case 234: {
            global::Playdek.TwilightStruggle.V1.GameOver subBuilder = new global::Playdek.TwilightStruggle.V1.GameOver();
            if (detailsCase_ == DetailsOneofCase.GameOver) {
              subBuilder.MergeFrom(GameOver);
            }
            input.ReadMessage(subBuilder);
            GameOver = subBuilder;
            break;
          }
          case 242: {
            global::Playdek.TwilightStruggle.V1.AssignSides subBuilder = new global::Playdek.TwilightStruggle.V1.AssignSides();
            if (detailsCase_ == DetailsOneofCase.AssignSides) {
              subBuilder.MergeFrom(AssignSides);
            }
            input.ReadMessage(subBuilder);
            AssignSides = subBuilder;
            break;
          }
          case 250: {
            global::Playdek.TwilightStruggle.V1.Realignment subBuilder = new global::Playdek.TwilightStruggle.V1.Realignment();
            if (detailsCase_ == DetailsOneofCase.Realignment) {
              subBuilder.MergeFrom(Realignment);
            }
            input.ReadMessage(subBuilder);
            Realignment = subBuilder;
            break;
          }
          case 258: {
            global::Playdek.TwilightStruggle.V1.PushResolveCard subBuilder = new global::Playdek.TwilightStruggle.V1.PushResolveCard();
            if (detailsCase_ == DetailsOneofCase.PushResolveCard) {
              subBuilder.MergeFrom(PushResolveCard);
            }
            input.ReadMessage(subBuilder);
            PushResolveCard = subBuilder;
            break;
          }
          case 266: {
            global::Playdek.TwilightStruggle.V1.PopResolveCard subBuilder = new global::Playdek.TwilightStruggle.V1.PopResolveCard();
            if (detailsCase_ == DetailsOneofCase.PopResolveCard) {
              subBuilder.MergeFrom(PopResolveCard);
            }
            input.ReadMessage(subBuilder);
            PopResolveCard = subBuilder;
            break;
          }
          case 274: {
            global::Playdek.TwilightStruggle.V1.PushRevealCard subBuilder = new global::Playdek.TwilightStruggle.V1.PushRevealCard();
            if (detailsCase_ == DetailsOneofCase.PushRevealCard) {
              subBuilder.MergeFrom(PushRevealCard);
            }
            input.ReadMessage(subBuilder);
            PushRevealCard = subBuilder;
            break;
          }
          case 282: {
            global::Playdek.TwilightStruggle.V1.PopRevealCard subBuilder = new global::Playdek.TwilightStruggle.V1.PopRevealCard();
            if (detailsCase_ == DetailsOneofCase.PopRevealCard) {
              subBuilder.MergeFrom(PopRevealCard);
            }
            input.ReadMessage(subBuilder);
            PopRevealCard = subBuilder;
            break;
          }
          case 290: {
            global::Playdek.TwilightStruggle.V1.SetRevealCardPlayer subBuilder = new global::Playdek.TwilightStruggle.V1.SetRevealCardPlayer();
            if (detailsCase_ == DetailsOneofCase.SetRevealCardPlayer) {
              subBuilder.MergeFrom(SetRevealCardPlayer);
            }
            input.ReadMessage(subBuilder);
            SetRevealCardPlayer = subBuilder;
            break;
          }
          case 298: {
            global::Playdek.TwilightStruggle.V1.SetHeadlineCardRevealed subBuilder = new global::Playdek.TwilightStruggle.V1.SetHeadlineCardRevealed();
            if (detailsCase_ == DetailsOneofCase.SetHeadlineCardRevealed) {
              subBuilder.MergeFrom(SetHeadlineCardRevealed);
            }
            input.ReadMessage(subBuilder);
            SetHeadlineCardRevealed = subBuilder;
            break;
          }
          case 306: {
            global::Playdek.TwilightStruggle.V1.LoadProgress subBuilder = new global::Playdek.TwilightStruggle.V1.LoadProgress();
            if (detailsCase_ == DetailsOneofCase.LoadProgress) {
              subBuilder.MergeFrom(LoadProgress);
            }
            input.ReadMessage(subBuilder);
            LoadProgress = subBuilder;
            break;
          }
          case 314: {
            global::Playdek.TwilightStruggle.V1.CommitPlayerDecision subBuilder = new global::Playdek.TwilightStruggle.V1.CommitPlayerDecision();
            if (detailsCase_ == DetailsOneofCase.CommitPlayerDecision) {
              subBuilder.MergeFrom(CommitPlayerDecision);
            }
            input.ReadMessage(subBuilder);
            CommitPlayerDecision = subBuilder;
            break;
          }
          case 322: {
            global::Playdek.TwilightStruggle.V1.CoupRoll subBuilder = new global::Playdek.TwilightStruggle.V1.CoupRoll();
            if (detailsCase_ == DetailsOneofCase.CoupRoll) {
              subBuilder.MergeFrom(CoupRoll);
            }
            input.ReadMessage(subBuilder);
            CoupRoll = subBuilder;
            break;
          }
          case 330: {
            global::Playdek.TwilightStruggle.V1.WarRoll subBuilder = new global::Playdek.TwilightStruggle.V1.WarRoll();
            if (detailsCase_ == DetailsOneofCase.WarRoll) {
              subBuilder.MergeFrom(WarRoll);
            }
            input.ReadMessage(subBuilder);
            WarRoll = subBuilder;
            break;
          }
          case 338: {
            global::Playdek.TwilightStruggle.V1.SpaceRaceRoll subBuilder = new global::Playdek.TwilightStruggle.V1.SpaceRaceRoll();
            if (detailsCase_ == DetailsOneofCase.SpaceRaceRoll) {
              subBuilder.MergeFrom(SpaceRaceRoll);
            }
            input.ReadMessage(subBuilder);
            SpaceRaceRoll = subBuilder;
            break;
          }
          case 346: {
            global::Playdek.TwilightStruggle.V1.TrapRoll subBuilder = new global::Playdek.TwilightStruggle.V1.TrapRoll();
            if (detailsCase_ == DetailsOneofCase.TrapRoll) {
              subBuilder.MergeFrom(TrapRoll);
            }
            input.ReadMessage(subBuilder);
            TrapRoll = subBuilder;
            break;
          }
          case 354: {
            global::Playdek.TwilightStruggle.V1.ScoringCardPlayed subBuilder = new global::Playdek.TwilightStruggle.V1.ScoringCardPlayed();
            if (detailsCase_ == DetailsOneofCase.ScoringCardPlayed) {
              subBuilder.MergeFrom(ScoringCardPlayed);
            }
            input.ReadMessage(subBuilder);
            ScoringCardPlayed = subBuilder;
            break;
          }
          case 362: {
            global::Playdek.TwilightStruggle.V1.FinalScoring subBuilder = new global::Playdek.TwilightStruggle.V1.FinalScoring();
            if (detailsCase_ == DetailsOneofCase.FinalScoring) {
              subBuilder.MergeFrom(FinalScoring);
            }
            input.ReadMessage(subBuilder);
            FinalScoring = subBuilder;
            break;
          }
          case 370: {
            global::Playdek.TwilightStruggle.V1.EffectRoll subBuilder = new global::Playdek.TwilightStruggle.V1.EffectRoll();
            if (detailsCase_ == DetailsOneofCase.EffectRoll) {
              subBuilder.MergeFrom(EffectRoll);
            }
            input.ReadMessage(subBuilder);
            EffectRoll = subBuilder;
            break;
          }
          case 378: {
            global::Playdek.TwilightStruggle.V1.EndTurn subBuilder = new global::Playdek.TwilightStruggle.V1.EndTurn();
            if (detailsCase_ == DetailsOneofCase.EndTurn) {
              subBuilder.MergeFrom(EndTurn);
            }
            input.ReadMessage(subBuilder);
            EndTurn = subBuilder;
            break;
          }
          case 386: {
            global::Playdek.TwilightStruggle.V1.HeadlineAnnounce subBuilder = new global::Playdek.TwilightStruggle.V1.HeadlineAnnounce();
            if (detailsCase_ == DetailsOneofCase.HeadlineAnnounce) {
              subBuilder.MergeFrom(HeadlineAnnounce);
            }
            input.ReadMessage(subBuilder);
            HeadlineAnnounce = subBuilder;
            break;
          }
          case 394: {
            global::Playdek.TwilightStruggle.V1.Reshuffle subBuilder = new global::Playdek.TwilightStruggle.V1.Reshuffle();
            if (detailsCase_ == DetailsOneofCase.Reshuffle) {
              subBuilder.MergeFrom(Reshuffle);
            }
            input.ReadMessage(subBuilder);
            Reshuffle = subBuilder;
            break;
          }
          case 402: {
            global::Playdek.TwilightStruggle.V1.PauseForRevealedCards subBuilder = new global::Playdek.TwilightStruggle.V1.PauseForRevealedCards();
            if (detailsCase_ == DetailsOneofCase.PauseForRevealedCards) {
              subBuilder.MergeFrom(PauseForRevealedCards);
            }
            input.ReadMessage(subBuilder);
            PauseForRevealedCards = subBuilder;
            break;
          }
          case 410: {
            global::Playdek.TwilightStruggle.V1.TutorialAISelectedOption subBuilder = new global::Playdek.TwilightStruggle.V1.TutorialAISelectedOption();
            if (detailsCase_ == DetailsOneofCase.TutorialAiSelectedOption) {
              subBuilder.MergeFrom(TutorialAiSelectedOption);
            }
            input.ReadMessage(subBuilder);
            TutorialAiSelectedOption = subBuilder;
            break;
          }
          case 418: {
            global::Playdek.TwilightStruggle.V1.BiddingResults subBuilder = new global::Playdek.TwilightStruggle.V1.BiddingResults();
            if (detailsCase_ == DetailsOneofCase.BiddingResults) {
              subBuilder.MergeFrom(BiddingResults);
            }
            input.ReadMessage(subBuilder);
            BiddingResults = subBuilder;
            break;
          }
          case 426: {
            global::Playdek.TwilightStruggle.V1.TurnZero subBuilder = new global::Playdek.TwilightStruggle.V1.TurnZero();
            if (detailsCase_ == DetailsOneofCase.TurnZero) {
              subBuilder.MergeFrom(TurnZero);
            }
            input.ReadMessage(subBuilder);
            TurnZero = subBuilder;
            break;
          }
          case 434: {
            global::Playdek.TwilightStruggle.V1.TurnZeroCrisisCard subBuilder = new global::Playdek.TwilightStruggle.V1.TurnZeroCrisisCard();
            if (detailsCase_ == DetailsOneofCase.TurnZeroCrisisCard) {
              subBuilder.MergeFrom(TurnZeroCrisisCard);
            }
            input.ReadMessage(subBuilder);
            TurnZeroCrisisCard = subBuilder;
            break;
          }
          case 442: {
            global::Playdek.TwilightStruggle.V1.SetStatecraftCardRevealed subBuilder = new global::Playdek.TwilightStruggle.V1.SetStatecraftCardRevealed();
            if (detailsCase_ == DetailsOneofCase.SetStatecraftCardRevealed) {
              subBuilder.MergeFrom(SetStatecraftCardRevealed);
            }
            input.ReadMessage(subBuilder);
            SetStatecraftCardRevealed = subBuilder;
            break;
          }
          case 450: {
            global::Playdek.TwilightStruggle.V1.CrisisCardRoll subBuilder = new global::Playdek.TwilightStruggle.V1.CrisisCardRoll();
            if (detailsCase_ == DetailsOneofCase.CrisisCardRoll) {
              subBuilder.MergeFrom(CrisisCardRoll);
            }
            input.ReadMessage(subBuilder);
            CrisisCardRoll = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputEventPause : pb::IMessage<OutputEventPause> {
    private static readonly pb::MessageParser<OutputEventPause> _parser = new pb::MessageParser<OutputEventPause>(() => new OutputEventPause());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputEventPause> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventPause() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventPause(OutputEventPause other) : this() {
      pauseType_ = other.pauseType_;
      animationData_ = other.animationData_;
      excludePlayerIndex_ = other.excludePlayerIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventPause Clone() {
      return new OutputEventPause(this);
    }

    /// <summary>Field number for the "pause_type" field.</summary>
    public const int PauseTypeFieldNumber = 1;
    private int pauseType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PauseType {
      get { return pauseType_; }
      set {
        pauseType_ = value;
      }
    }

    /// <summary>Field number for the "animation_data" field.</summary>
    public const int AnimationDataFieldNumber = 2;
    private uint animationData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AnimationData {
      get { return animationData_; }
      set {
        animationData_ = value;
      }
    }

    /// <summary>Field number for the "exclude_player_index" field.</summary>
    public const int ExcludePlayerIndexFieldNumber = 3;
    private int excludePlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExcludePlayerIndex {
      get { return excludePlayerIndex_; }
      set {
        excludePlayerIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputEventPause);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputEventPause other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PauseType != other.PauseType) return false;
      if (AnimationData != other.AnimationData) return false;
      if (ExcludePlayerIndex != other.ExcludePlayerIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PauseType != 0) hash ^= PauseType.GetHashCode();
      if (AnimationData != 0) hash ^= AnimationData.GetHashCode();
      if (ExcludePlayerIndex != 0) hash ^= ExcludePlayerIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PauseType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PauseType);
      }
      if (AnimationData != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AnimationData);
      }
      if (ExcludePlayerIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExcludePlayerIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PauseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PauseType);
      }
      if (AnimationData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AnimationData);
      }
      if (ExcludePlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExcludePlayerIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputEventPause other) {
      if (other == null) {
        return;
      }
      if (other.PauseType != 0) {
        PauseType = other.PauseType;
      }
      if (other.AnimationData != 0) {
        AnimationData = other.AnimationData;
      }
      if (other.ExcludePlayerIndex != 0) {
        ExcludePlayerIndex = other.ExcludePlayerIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PauseType = input.ReadInt32();
            break;
          }
          case 16: {
            AnimationData = input.ReadUInt32();
            break;
          }
          case 24: {
            ExcludePlayerIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputEventAnimationCard : pb::IMessage<OutputEventAnimationCard> {
    private static readonly pb::MessageParser<OutputEventAnimationCard> _parser = new pb::MessageParser<OutputEventAnimationCard>(() => new OutputEventAnimationCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputEventAnimationCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationCard(OutputEventAnimationCard other) : this() {
      cardInstanceId_ = other.cardInstanceId_;
      animationSourceLocation_ = other.animationSourceLocation_;
      animationSourceInstanceId_ = other.animationSourceInstanceId_;
      animationDestinationLocation_ = other.animationDestinationLocation_;
      animationDestinationInstanceId_ = other.animationDestinationInstanceId_;
      animationEventHint_ = other.animationEventHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationCard Clone() {
      return new OutputEventAnimationCard(this);
    }

    /// <summary>Field number for the "card_instance_id" field.</summary>
    public const int CardInstanceIdFieldNumber = 1;
    private int cardInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardInstanceId {
      get { return cardInstanceId_; }
      set {
        cardInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "animation_source_location" field.</summary>
    public const int AnimationSourceLocationFieldNumber = 2;
    private int animationSourceLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationSourceLocation {
      get { return animationSourceLocation_; }
      set {
        animationSourceLocation_ = value;
      }
    }

    /// <summary>Field number for the "animation_source_instance_id" field.</summary>
    public const int AnimationSourceInstanceIdFieldNumber = 3;
    private int animationSourceInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationSourceInstanceId {
      get { return animationSourceInstanceId_; }
      set {
        animationSourceInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "animation_destination_location" field.</summary>
    public const int AnimationDestinationLocationFieldNumber = 4;
    private int animationDestinationLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationDestinationLocation {
      get { return animationDestinationLocation_; }
      set {
        animationDestinationLocation_ = value;
      }
    }

    /// <summary>Field number for the "animation_destination_instance_id" field.</summary>
    public const int AnimationDestinationInstanceIdFieldNumber = 5;
    private int animationDestinationInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationDestinationInstanceId {
      get { return animationDestinationInstanceId_; }
      set {
        animationDestinationInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "animation_event_hint" field.</summary>
    public const int AnimationEventHintFieldNumber = 6;
    private int animationEventHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationEventHint {
      get { return animationEventHint_; }
      set {
        animationEventHint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputEventAnimationCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputEventAnimationCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardInstanceId != other.CardInstanceId) return false;
      if (AnimationSourceLocation != other.AnimationSourceLocation) return false;
      if (AnimationSourceInstanceId != other.AnimationSourceInstanceId) return false;
      if (AnimationDestinationLocation != other.AnimationDestinationLocation) return false;
      if (AnimationDestinationInstanceId != other.AnimationDestinationInstanceId) return false;
      if (AnimationEventHint != other.AnimationEventHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardInstanceId != 0) hash ^= CardInstanceId.GetHashCode();
      if (AnimationSourceLocation != 0) hash ^= AnimationSourceLocation.GetHashCode();
      if (AnimationSourceInstanceId != 0) hash ^= AnimationSourceInstanceId.GetHashCode();
      if (AnimationDestinationLocation != 0) hash ^= AnimationDestinationLocation.GetHashCode();
      if (AnimationDestinationInstanceId != 0) hash ^= AnimationDestinationInstanceId.GetHashCode();
      if (AnimationEventHint != 0) hash ^= AnimationEventHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardInstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardInstanceId);
      }
      if (AnimationSourceLocation != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AnimationSourceLocation);
      }
      if (AnimationSourceInstanceId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AnimationSourceInstanceId);
      }
      if (AnimationDestinationLocation != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AnimationDestinationLocation);
      }
      if (AnimationDestinationInstanceId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AnimationDestinationInstanceId);
      }
      if (AnimationEventHint != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AnimationEventHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardInstanceId);
      }
      if (AnimationSourceLocation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationSourceLocation);
      }
      if (AnimationSourceInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationSourceInstanceId);
      }
      if (AnimationDestinationLocation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationDestinationLocation);
      }
      if (AnimationDestinationInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationDestinationInstanceId);
      }
      if (AnimationEventHint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationEventHint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputEventAnimationCard other) {
      if (other == null) {
        return;
      }
      if (other.CardInstanceId != 0) {
        CardInstanceId = other.CardInstanceId;
      }
      if (other.AnimationSourceLocation != 0) {
        AnimationSourceLocation = other.AnimationSourceLocation;
      }
      if (other.AnimationSourceInstanceId != 0) {
        AnimationSourceInstanceId = other.AnimationSourceInstanceId;
      }
      if (other.AnimationDestinationLocation != 0) {
        AnimationDestinationLocation = other.AnimationDestinationLocation;
      }
      if (other.AnimationDestinationInstanceId != 0) {
        AnimationDestinationInstanceId = other.AnimationDestinationInstanceId;
      }
      if (other.AnimationEventHint != 0) {
        AnimationEventHint = other.AnimationEventHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardInstanceId = input.ReadInt32();
            break;
          }
          case 16: {
            AnimationSourceLocation = input.ReadInt32();
            break;
          }
          case 24: {
            AnimationSourceInstanceId = input.ReadInt32();
            break;
          }
          case 32: {
            AnimationDestinationLocation = input.ReadInt32();
            break;
          }
          case 40: {
            AnimationDestinationInstanceId = input.ReadInt32();
            break;
          }
          case 48: {
            AnimationEventHint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputEventAnimationAddInfluence : pb::IMessage<OutputEventAnimationAddInfluence> {
    private static readonly pb::MessageParser<OutputEventAnimationAddInfluence> _parser = new pb::MessageParser<OutputEventAnimationAddInfluence>(() => new OutputEventAnimationAddInfluence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputEventAnimationAddInfluence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationAddInfluence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationAddInfluence(OutputEventAnimationAddInfluence other) : this() {
      sourcePlayerIndex_ = other.sourcePlayerIndex_;
      sourceCardInstanceId_ = other.sourceCardInstanceId_;
      countryInstanceId_ = other.countryInstanceId_;
      influenceCount_ = other.influenceCount_;
      animationEventHint_ = other.animationEventHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationAddInfluence Clone() {
      return new OutputEventAnimationAddInfluence(this);
    }

    /// <summary>Field number for the "source_player_index" field.</summary>
    public const int SourcePlayerIndexFieldNumber = 1;
    private int sourcePlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerIndex {
      get { return sourcePlayerIndex_; }
      set {
        sourcePlayerIndex_ = value;
      }
    }

    /// <summary>Field number for the "source_card_instance_id" field.</summary>
    public const int SourceCardInstanceIdFieldNumber = 2;
    private int sourceCardInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceCardInstanceId {
      get { return sourceCardInstanceId_; }
      set {
        sourceCardInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "country_instance_id" field.</summary>
    public const int CountryInstanceIdFieldNumber = 3;
    private int countryInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryInstanceId {
      get { return countryInstanceId_; }
      set {
        countryInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "influence_count" field.</summary>
    public const int InfluenceCountFieldNumber = 4;
    private int influenceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfluenceCount {
      get { return influenceCount_; }
      set {
        influenceCount_ = value;
      }
    }

    /// <summary>Field number for the "animation_event_hint" field.</summary>
    public const int AnimationEventHintFieldNumber = 5;
    private int animationEventHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationEventHint {
      get { return animationEventHint_; }
      set {
        animationEventHint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputEventAnimationAddInfluence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputEventAnimationAddInfluence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerIndex != other.SourcePlayerIndex) return false;
      if (SourceCardInstanceId != other.SourceCardInstanceId) return false;
      if (CountryInstanceId != other.CountryInstanceId) return false;
      if (InfluenceCount != other.InfluenceCount) return false;
      if (AnimationEventHint != other.AnimationEventHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourcePlayerIndex != 0) hash ^= SourcePlayerIndex.GetHashCode();
      if (SourceCardInstanceId != 0) hash ^= SourceCardInstanceId.GetHashCode();
      if (CountryInstanceId != 0) hash ^= CountryInstanceId.GetHashCode();
      if (InfluenceCount != 0) hash ^= InfluenceCount.GetHashCode();
      if (AnimationEventHint != 0) hash ^= AnimationEventHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourcePlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerIndex);
      }
      if (SourceCardInstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceCardInstanceId);
      }
      if (CountryInstanceId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CountryInstanceId);
      }
      if (InfluenceCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InfluenceCount);
      }
      if (AnimationEventHint != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AnimationEventHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourcePlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerIndex);
      }
      if (SourceCardInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceCardInstanceId);
      }
      if (CountryInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryInstanceId);
      }
      if (InfluenceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfluenceCount);
      }
      if (AnimationEventHint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationEventHint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputEventAnimationAddInfluence other) {
      if (other == null) {
        return;
      }
      if (other.SourcePlayerIndex != 0) {
        SourcePlayerIndex = other.SourcePlayerIndex;
      }
      if (other.SourceCardInstanceId != 0) {
        SourceCardInstanceId = other.SourceCardInstanceId;
      }
      if (other.CountryInstanceId != 0) {
        CountryInstanceId = other.CountryInstanceId;
      }
      if (other.InfluenceCount != 0) {
        InfluenceCount = other.InfluenceCount;
      }
      if (other.AnimationEventHint != 0) {
        AnimationEventHint = other.AnimationEventHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            SourceCardInstanceId = input.ReadInt32();
            break;
          }
          case 24: {
            CountryInstanceId = input.ReadInt32();
            break;
          }
          case 32: {
            InfluenceCount = input.ReadInt32();
            break;
          }
          case 40: {
            AnimationEventHint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputEventAnimationRemoveInfluence : pb::IMessage<OutputEventAnimationRemoveInfluence> {
    private static readonly pb::MessageParser<OutputEventAnimationRemoveInfluence> _parser = new pb::MessageParser<OutputEventAnimationRemoveInfluence>(() => new OutputEventAnimationRemoveInfluence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputEventAnimationRemoveInfluence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationRemoveInfluence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationRemoveInfluence(OutputEventAnimationRemoveInfluence other) : this() {
      sourcePlayerIndex_ = other.sourcePlayerIndex_;
      sourceCardInstanceId_ = other.sourceCardInstanceId_;
      countryInstanceId_ = other.countryInstanceId_;
      influenceCount_ = other.influenceCount_;
      animationEventHint_ = other.animationEventHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationRemoveInfluence Clone() {
      return new OutputEventAnimationRemoveInfluence(this);
    }

    /// <summary>Field number for the "source_player_index" field.</summary>
    public const int SourcePlayerIndexFieldNumber = 1;
    private int sourcePlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerIndex {
      get { return sourcePlayerIndex_; }
      set {
        sourcePlayerIndex_ = value;
      }
    }

    /// <summary>Field number for the "source_card_instance_id" field.</summary>
    public const int SourceCardInstanceIdFieldNumber = 2;
    private int sourceCardInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceCardInstanceId {
      get { return sourceCardInstanceId_; }
      set {
        sourceCardInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "country_instance_id" field.</summary>
    public const int CountryInstanceIdFieldNumber = 3;
    private int countryInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryInstanceId {
      get { return countryInstanceId_; }
      set {
        countryInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "influence_count" field.</summary>
    public const int InfluenceCountFieldNumber = 4;
    private int influenceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfluenceCount {
      get { return influenceCount_; }
      set {
        influenceCount_ = value;
      }
    }

    /// <summary>Field number for the "animation_event_hint" field.</summary>
    public const int AnimationEventHintFieldNumber = 5;
    private int animationEventHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationEventHint {
      get { return animationEventHint_; }
      set {
        animationEventHint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputEventAnimationRemoveInfluence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputEventAnimationRemoveInfluence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerIndex != other.SourcePlayerIndex) return false;
      if (SourceCardInstanceId != other.SourceCardInstanceId) return false;
      if (CountryInstanceId != other.CountryInstanceId) return false;
      if (InfluenceCount != other.InfluenceCount) return false;
      if (AnimationEventHint != other.AnimationEventHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourcePlayerIndex != 0) hash ^= SourcePlayerIndex.GetHashCode();
      if (SourceCardInstanceId != 0) hash ^= SourceCardInstanceId.GetHashCode();
      if (CountryInstanceId != 0) hash ^= CountryInstanceId.GetHashCode();
      if (InfluenceCount != 0) hash ^= InfluenceCount.GetHashCode();
      if (AnimationEventHint != 0) hash ^= AnimationEventHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourcePlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerIndex);
      }
      if (SourceCardInstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceCardInstanceId);
      }
      if (CountryInstanceId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CountryInstanceId);
      }
      if (InfluenceCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InfluenceCount);
      }
      if (AnimationEventHint != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AnimationEventHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourcePlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerIndex);
      }
      if (SourceCardInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceCardInstanceId);
      }
      if (CountryInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryInstanceId);
      }
      if (InfluenceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfluenceCount);
      }
      if (AnimationEventHint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationEventHint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputEventAnimationRemoveInfluence other) {
      if (other == null) {
        return;
      }
      if (other.SourcePlayerIndex != 0) {
        SourcePlayerIndex = other.SourcePlayerIndex;
      }
      if (other.SourceCardInstanceId != 0) {
        SourceCardInstanceId = other.SourceCardInstanceId;
      }
      if (other.CountryInstanceId != 0) {
        CountryInstanceId = other.CountryInstanceId;
      }
      if (other.InfluenceCount != 0) {
        InfluenceCount = other.InfluenceCount;
      }
      if (other.AnimationEventHint != 0) {
        AnimationEventHint = other.AnimationEventHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            SourceCardInstanceId = input.ReadInt32();
            break;
          }
          case 24: {
            CountryInstanceId = input.ReadInt32();
            break;
          }
          case 32: {
            InfluenceCount = input.ReadInt32();
            break;
          }
          case 40: {
            AnimationEventHint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputEventAnimationTargetCountry : pb::IMessage<OutputEventAnimationTargetCountry> {
    private static readonly pb::MessageParser<OutputEventAnimationTargetCountry> _parser = new pb::MessageParser<OutputEventAnimationTargetCountry>(() => new OutputEventAnimationTargetCountry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputEventAnimationTargetCountry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationTargetCountry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationTargetCountry(OutputEventAnimationTargetCountry other) : this() {
      sourcePlayerIndex_ = other.sourcePlayerIndex_;
      sourceCardInstanceId_ = other.sourceCardInstanceId_;
      countryInstanceId_ = other.countryInstanceId_;
      targetType_ = other.targetType_;
      animationEventHint_ = other.animationEventHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationTargetCountry Clone() {
      return new OutputEventAnimationTargetCountry(this);
    }

    /// <summary>Field number for the "source_player_index" field.</summary>
    public const int SourcePlayerIndexFieldNumber = 1;
    private int sourcePlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourcePlayerIndex {
      get { return sourcePlayerIndex_; }
      set {
        sourcePlayerIndex_ = value;
      }
    }

    /// <summary>Field number for the "source_card_instance_id" field.</summary>
    public const int SourceCardInstanceIdFieldNumber = 2;
    private int sourceCardInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceCardInstanceId {
      get { return sourceCardInstanceId_; }
      set {
        sourceCardInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "country_instance_id" field.</summary>
    public const int CountryInstanceIdFieldNumber = 3;
    private int countryInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryInstanceId {
      get { return countryInstanceId_; }
      set {
        countryInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "target_type" field.</summary>
    public const int TargetTypeFieldNumber = 4;
    private int targetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "animation_event_hint" field.</summary>
    public const int AnimationEventHintFieldNumber = 5;
    private int animationEventHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationEventHint {
      get { return animationEventHint_; }
      set {
        animationEventHint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputEventAnimationTargetCountry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputEventAnimationTargetCountry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerIndex != other.SourcePlayerIndex) return false;
      if (SourceCardInstanceId != other.SourceCardInstanceId) return false;
      if (CountryInstanceId != other.CountryInstanceId) return false;
      if (TargetType != other.TargetType) return false;
      if (AnimationEventHint != other.AnimationEventHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourcePlayerIndex != 0) hash ^= SourcePlayerIndex.GetHashCode();
      if (SourceCardInstanceId != 0) hash ^= SourceCardInstanceId.GetHashCode();
      if (CountryInstanceId != 0) hash ^= CountryInstanceId.GetHashCode();
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (AnimationEventHint != 0) hash ^= AnimationEventHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourcePlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourcePlayerIndex);
      }
      if (SourceCardInstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceCardInstanceId);
      }
      if (CountryInstanceId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CountryInstanceId);
      }
      if (TargetType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetType);
      }
      if (AnimationEventHint != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AnimationEventHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourcePlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePlayerIndex);
      }
      if (SourceCardInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceCardInstanceId);
      }
      if (CountryInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryInstanceId);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (AnimationEventHint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationEventHint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputEventAnimationTargetCountry other) {
      if (other == null) {
        return;
      }
      if (other.SourcePlayerIndex != 0) {
        SourcePlayerIndex = other.SourcePlayerIndex;
      }
      if (other.SourceCardInstanceId != 0) {
        SourceCardInstanceId = other.SourceCardInstanceId;
      }
      if (other.CountryInstanceId != 0) {
        CountryInstanceId = other.CountryInstanceId;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.AnimationEventHint != 0) {
        AnimationEventHint = other.AnimationEventHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourcePlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            SourceCardInstanceId = input.ReadInt32();
            break;
          }
          case 24: {
            CountryInstanceId = input.ReadInt32();
            break;
          }
          case 32: {
            TargetType = input.ReadInt32();
            break;
          }
          case 40: {
            AnimationEventHint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputEventAnimationVictoryPoints : pb::IMessage<OutputEventAnimationVictoryPoints> {
    private static readonly pb::MessageParser<OutputEventAnimationVictoryPoints> _parser = new pb::MessageParser<OutputEventAnimationVictoryPoints>(() => new OutputEventAnimationVictoryPoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputEventAnimationVictoryPoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationVictoryPoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationVictoryPoints(OutputEventAnimationVictoryPoints other) : this() {
      sourceCardInstanceId_ = other.sourceCardInstanceId_;
      victoryPointCount_ = other.victoryPointCount_;
      animationEventHint_ = other.animationEventHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputEventAnimationVictoryPoints Clone() {
      return new OutputEventAnimationVictoryPoints(this);
    }

    /// <summary>Field number for the "source_card_instance_id" field.</summary>
    public const int SourceCardInstanceIdFieldNumber = 1;
    private int sourceCardInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceCardInstanceId {
      get { return sourceCardInstanceId_; }
      set {
        sourceCardInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "victory_point_count" field.</summary>
    public const int VictoryPointCountFieldNumber = 2;
    private int victoryPointCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictoryPointCount {
      get { return victoryPointCount_; }
      set {
        victoryPointCount_ = value;
      }
    }

    /// <summary>Field number for the "animation_event_hint" field.</summary>
    public const int AnimationEventHintFieldNumber = 3;
    private int animationEventHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationEventHint {
      get { return animationEventHint_; }
      set {
        animationEventHint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputEventAnimationVictoryPoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputEventAnimationVictoryPoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceCardInstanceId != other.SourceCardInstanceId) return false;
      if (VictoryPointCount != other.VictoryPointCount) return false;
      if (AnimationEventHint != other.AnimationEventHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceCardInstanceId != 0) hash ^= SourceCardInstanceId.GetHashCode();
      if (VictoryPointCount != 0) hash ^= VictoryPointCount.GetHashCode();
      if (AnimationEventHint != 0) hash ^= AnimationEventHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceCardInstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceCardInstanceId);
      }
      if (VictoryPointCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VictoryPointCount);
      }
      if (AnimationEventHint != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AnimationEventHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceCardInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceCardInstanceId);
      }
      if (VictoryPointCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictoryPointCount);
      }
      if (AnimationEventHint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationEventHint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputEventAnimationVictoryPoints other) {
      if (other == null) {
        return;
      }
      if (other.SourceCardInstanceId != 0) {
        SourceCardInstanceId = other.SourceCardInstanceId;
      }
      if (other.VictoryPointCount != 0) {
        VictoryPointCount = other.VictoryPointCount;
      }
      if (other.AnimationEventHint != 0) {
        AnimationEventHint = other.AnimationEventHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceCardInstanceId = input.ReadInt32();
            break;
          }
          case 16: {
            VictoryPointCount = input.ReadInt32();
            break;
          }
          case 24: {
            AnimationEventHint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CountryDefinition : pb::IMessage<CountryDefinition> {
    private static readonly pb::MessageParser<CountryDefinition> _parser = new pb::MessageParser<CountryDefinition>(() => new CountryDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountryDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryDefinition(CountryDefinition other) : this() {
      id_ = other.id_;
      stability_ = other.stability_;
      battleground_ = other.battleground_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryDefinition Clone() {
      return new CountryDefinition(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "stability" field.</summary>
    public const int StabilityFieldNumber = 2;
    private int stability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stability {
      get { return stability_; }
      set {
        stability_ = value;
      }
    }

    /// <summary>Field number for the "battleground" field.</summary>
    public const int BattlegroundFieldNumber = 3;
    private int battleground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battleground {
      get { return battleground_; }
      set {
        battleground_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountryDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountryDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Stability != other.Stability) return false;
      if (Battleground != other.Battleground) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Stability != 0) hash ^= Stability.GetHashCode();
      if (Battleground != 0) hash ^= Battleground.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Stability != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stability);
      }
      if (Battleground != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Battleground);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Stability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stability);
      }
      if (Battleground != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battleground);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountryDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Stability != 0) {
        Stability = other.Stability;
      }
      if (other.Battleground != 0) {
        Battleground = other.Battleground;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Stability = input.ReadInt32();
            break;
          }
          case 24: {
            Battleground = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CountryInfluence : pb::IMessage<CountryInfluence> {
    private static readonly pb::MessageParser<CountryInfluence> _parser = new pb::MessageParser<CountryInfluence>(() => new CountryInfluence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountryInfluence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryInfluence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryInfluence(CountryInfluence other) : this() {
      id_ = other.id_;
      ussrInfluence_ = other.ussrInfluence_;
      usaInfluence_ = other.usaInfluence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryInfluence Clone() {
      return new CountryInfluence(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ussr_influence" field.</summary>
    public const int UssrInfluenceFieldNumber = 2;
    private int ussrInfluence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrInfluence {
      get { return ussrInfluence_; }
      set {
        ussrInfluence_ = value;
      }
    }

    /// <summary>Field number for the "usa_influence" field.</summary>
    public const int UsaInfluenceFieldNumber = 3;
    private int usaInfluence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaInfluence {
      get { return usaInfluence_; }
      set {
        usaInfluence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountryInfluence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountryInfluence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UssrInfluence != other.UssrInfluence) return false;
      if (UsaInfluence != other.UsaInfluence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (UssrInfluence != 0) hash ^= UssrInfluence.GetHashCode();
      if (UsaInfluence != 0) hash ^= UsaInfluence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (UssrInfluence != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UssrInfluence);
      }
      if (UsaInfluence != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UsaInfluence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (UssrInfluence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrInfluence);
      }
      if (UsaInfluence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaInfluence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountryInfluence other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.UssrInfluence != 0) {
        UssrInfluence = other.UssrInfluence;
      }
      if (other.UsaInfluence != 0) {
        UsaInfluence = other.UsaInfluence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            UssrInfluence = input.ReadInt32();
            break;
          }
          case 24: {
            UsaInfluence = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardLocation : pb::IMessage<CardLocation> {
    private static readonly pb::MessageParser<CardLocation> _parser = new pb::MessageParser<CardLocation>(() => new CardLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLocation(CardLocation other) : this() {
      id_ = other.id_;
      location_ = other.location_;
      doNotAnimate_ = other.doNotAnimate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardLocation Clone() {
      return new CardLocation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private int location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "do_not_animate" field.</summary>
    public const int DoNotAnimateFieldNumber = 3;
    private int doNotAnimate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DoNotAnimate {
      get { return doNotAnimate_; }
      set {
        doNotAnimate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Location != other.Location) return false;
      if (DoNotAnimate != other.DoNotAnimate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Location != 0) hash ^= Location.GetHashCode();
      if (DoNotAnimate != 0) hash ^= DoNotAnimate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Location != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Location);
      }
      if (DoNotAnimate != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DoNotAnimate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      if (DoNotAnimate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DoNotAnimate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardLocation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Location != 0) {
        Location = other.Location;
      }
      if (other.DoNotAnimate != 0) {
        DoNotAnimate = other.DoNotAnimate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Location = input.ReadInt32();
            break;
          }
          case 24: {
            DoNotAnimate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardInPlayStatus : pb::IMessage<CardInPlayStatus> {
    private static readonly pb::MessageParser<CardInPlayStatus> _parser = new pb::MessageParser<CardInPlayStatus>(() => new CardInPlayStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInPlayStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInPlayStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInPlayStatus(CardInPlayStatus other) : this() {
      cardInPlayInstanceId_ = other.cardInPlayInstanceId_;
      sourceCardInstanceId_ = other.sourceCardInstanceId_;
      ownerIndex_ = other.ownerIndex_;
      durationType_ = other.durationType_;
      inPlay_ = other.inPlay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInPlayStatus Clone() {
      return new CardInPlayStatus(this);
    }

    /// <summary>Field number for the "card_in_play_instance_id" field.</summary>
    public const int CardInPlayInstanceIdFieldNumber = 1;
    private int cardInPlayInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardInPlayInstanceId {
      get { return cardInPlayInstanceId_; }
      set {
        cardInPlayInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "source_card_instance_id" field.</summary>
    public const int SourceCardInstanceIdFieldNumber = 2;
    private int sourceCardInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceCardInstanceId {
      get { return sourceCardInstanceId_; }
      set {
        sourceCardInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "owner_index" field.</summary>
    public const int OwnerIndexFieldNumber = 3;
    private int ownerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerIndex {
      get { return ownerIndex_; }
      set {
        ownerIndex_ = value;
      }
    }

    /// <summary>Field number for the "duration_type" field.</summary>
    public const int DurationTypeFieldNumber = 4;
    private int durationType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationType {
      get { return durationType_; }
      set {
        durationType_ = value;
      }
    }

    /// <summary>Field number for the "in_play" field.</summary>
    public const int InPlayFieldNumber = 5;
    private int inPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InPlay {
      get { return inPlay_; }
      set {
        inPlay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInPlayStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInPlayStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardInPlayInstanceId != other.CardInPlayInstanceId) return false;
      if (SourceCardInstanceId != other.SourceCardInstanceId) return false;
      if (OwnerIndex != other.OwnerIndex) return false;
      if (DurationType != other.DurationType) return false;
      if (InPlay != other.InPlay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardInPlayInstanceId != 0) hash ^= CardInPlayInstanceId.GetHashCode();
      if (SourceCardInstanceId != 0) hash ^= SourceCardInstanceId.GetHashCode();
      if (OwnerIndex != 0) hash ^= OwnerIndex.GetHashCode();
      if (DurationType != 0) hash ^= DurationType.GetHashCode();
      if (InPlay != 0) hash ^= InPlay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardInPlayInstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardInPlayInstanceId);
      }
      if (SourceCardInstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceCardInstanceId);
      }
      if (OwnerIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OwnerIndex);
      }
      if (DurationType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DurationType);
      }
      if (InPlay != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InPlay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardInPlayInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardInPlayInstanceId);
      }
      if (SourceCardInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceCardInstanceId);
      }
      if (OwnerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerIndex);
      }
      if (DurationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationType);
      }
      if (InPlay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InPlay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInPlayStatus other) {
      if (other == null) {
        return;
      }
      if (other.CardInPlayInstanceId != 0) {
        CardInPlayInstanceId = other.CardInPlayInstanceId;
      }
      if (other.SourceCardInstanceId != 0) {
        SourceCardInstanceId = other.SourceCardInstanceId;
      }
      if (other.OwnerIndex != 0) {
        OwnerIndex = other.OwnerIndex;
      }
      if (other.DurationType != 0) {
        DurationType = other.DurationType;
      }
      if (other.InPlay != 0) {
        InPlay = other.InPlay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardInPlayInstanceId = input.ReadInt32();
            break;
          }
          case 16: {
            SourceCardInstanceId = input.ReadInt32();
            break;
          }
          case 24: {
            OwnerIndex = input.ReadInt32();
            break;
          }
          case 32: {
            DurationType = input.ReadInt32();
            break;
          }
          case 40: {
            InPlay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionRound : pb::IMessage<ActionRound> {
    private static readonly pb::MessageParser<ActionRound> _parser = new pb::MessageParser<ActionRound>(() => new ActionRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRound(ActionRound other) : this() {
      isSimulating_ = other.isSimulating_;
      actionRound_ = other.actionRound_;
      endOfTurn_ = other.endOfTurn_;
      phasingPlayerSuperpower_ = other.phasingPlayerSuperpower_;
      playerId_ = other.playerId_;
      affectedByMissileEnvy_ = other.affectedByMissileEnvy_;
      affectedByKremlinFlu_ = other.affectedByKremlinFlu_;
      scoringCardCount_ = other.scoringCardCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRound Clone() {
      return new ActionRound(this);
    }

    /// <summary>Field number for the "is_simulating" field.</summary>
    public const int IsSimulatingFieldNumber = 1;
    private int isSimulating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSimulating {
      get { return isSimulating_; }
      set {
        isSimulating_ = value;
      }
    }

    /// <summary>Field number for the "action_round" field.</summary>
    public const int ActionRound_FieldNumber = 2;
    private int actionRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionRound_ {
      get { return actionRound_; }
      set {
        actionRound_ = value;
      }
    }

    /// <summary>Field number for the "end_of_turn" field.</summary>
    public const int EndOfTurnFieldNumber = 3;
    private int endOfTurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndOfTurn {
      get { return endOfTurn_; }
      set {
        endOfTurn_ = value;
      }
    }

    /// <summary>Field number for the "phasing_player_superpower" field.</summary>
    public const int PhasingPlayerSuperpowerFieldNumber = 4;
    private int phasingPlayerSuperpower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhasingPlayerSuperpower {
      get { return phasingPlayerSuperpower_; }
      set {
        phasingPlayerSuperpower_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "affected_by_missile_envy" field.</summary>
    public const int AffectedByMissileEnvyFieldNumber = 6;
    private int affectedByMissileEnvy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AffectedByMissileEnvy {
      get { return affectedByMissileEnvy_; }
      set {
        affectedByMissileEnvy_ = value;
      }
    }

    /// <summary>Field number for the "affected_by_kremlin_flu" field.</summary>
    public const int AffectedByKremlinFluFieldNumber = 7;
    private int affectedByKremlinFlu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AffectedByKremlinFlu {
      get { return affectedByKremlinFlu_; }
      set {
        affectedByKremlinFlu_ = value;
      }
    }

    /// <summary>Field number for the "scoring_card_count" field.</summary>
    public const int ScoringCardCountFieldNumber = 8;
    private int scoringCardCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoringCardCount {
      get { return scoringCardCount_; }
      set {
        scoringCardCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSimulating != other.IsSimulating) return false;
      if (ActionRound_ != other.ActionRound_) return false;
      if (EndOfTurn != other.EndOfTurn) return false;
      if (PhasingPlayerSuperpower != other.PhasingPlayerSuperpower) return false;
      if (PlayerId != other.PlayerId) return false;
      if (AffectedByMissileEnvy != other.AffectedByMissileEnvy) return false;
      if (AffectedByKremlinFlu != other.AffectedByKremlinFlu) return false;
      if (ScoringCardCount != other.ScoringCardCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSimulating != 0) hash ^= IsSimulating.GetHashCode();
      if (ActionRound_ != 0) hash ^= ActionRound_.GetHashCode();
      if (EndOfTurn != 0) hash ^= EndOfTurn.GetHashCode();
      if (PhasingPlayerSuperpower != 0) hash ^= PhasingPlayerSuperpower.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (AffectedByMissileEnvy != 0) hash ^= AffectedByMissileEnvy.GetHashCode();
      if (AffectedByKremlinFlu != 0) hash ^= AffectedByKremlinFlu.GetHashCode();
      if (ScoringCardCount != 0) hash ^= ScoringCardCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSimulating != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsSimulating);
      }
      if (ActionRound_ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionRound_);
      }
      if (EndOfTurn != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndOfTurn);
      }
      if (PhasingPlayerSuperpower != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PhasingPlayerSuperpower);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerId);
      }
      if (AffectedByMissileEnvy != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AffectedByMissileEnvy);
      }
      if (AffectedByKremlinFlu != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AffectedByKremlinFlu);
      }
      if (ScoringCardCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ScoringCardCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSimulating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSimulating);
      }
      if (ActionRound_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionRound_);
      }
      if (EndOfTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndOfTurn);
      }
      if (PhasingPlayerSuperpower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhasingPlayerSuperpower);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (AffectedByMissileEnvy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AffectedByMissileEnvy);
      }
      if (AffectedByKremlinFlu != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AffectedByKremlinFlu);
      }
      if (ScoringCardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoringCardCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionRound other) {
      if (other == null) {
        return;
      }
      if (other.IsSimulating != 0) {
        IsSimulating = other.IsSimulating;
      }
      if (other.ActionRound_ != 0) {
        ActionRound_ = other.ActionRound_;
      }
      if (other.EndOfTurn != 0) {
        EndOfTurn = other.EndOfTurn;
      }
      if (other.PhasingPlayerSuperpower != 0) {
        PhasingPlayerSuperpower = other.PhasingPlayerSuperpower;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.AffectedByMissileEnvy != 0) {
        AffectedByMissileEnvy = other.AffectedByMissileEnvy;
      }
      if (other.AffectedByKremlinFlu != 0) {
        AffectedByKremlinFlu = other.AffectedByKremlinFlu;
      }
      if (other.ScoringCardCount != 0) {
        ScoringCardCount = other.ScoringCardCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsSimulating = input.ReadInt32();
            break;
          }
          case 16: {
            ActionRound_ = input.ReadInt32();
            break;
          }
          case 24: {
            EndOfTurn = input.ReadInt32();
            break;
          }
          case 32: {
            PhasingPlayerSuperpower = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 48: {
            AffectedByMissileEnvy = input.ReadInt32();
            break;
          }
          case 56: {
            AffectedByKremlinFlu = input.ReadInt32();
            break;
          }
          case 64: {
            ScoringCardCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhasingPlayer : pb::IMessage<PhasingPlayer> {
    private static readonly pb::MessageParser<PhasingPlayer> _parser = new pb::MessageParser<PhasingPlayer>(() => new PhasingPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhasingPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhasingPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhasingPlayer(PhasingPlayer other) : this() {
      phasingPlayer_ = other.phasingPlayer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhasingPlayer Clone() {
      return new PhasingPlayer(this);
    }

    /// <summary>Field number for the "phasing_player" field.</summary>
    public const int PhasingPlayer_FieldNumber = 1;
    private int phasingPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PhasingPlayer_ {
      get { return phasingPlayer_; }
      set {
        phasingPlayer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhasingPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhasingPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhasingPlayer_ != other.PhasingPlayer_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PhasingPlayer_ != 0) hash ^= PhasingPlayer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PhasingPlayer_ != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PhasingPlayer_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PhasingPlayer_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhasingPlayer_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhasingPlayer other) {
      if (other == null) {
        return;
      }
      if (other.PhasingPlayer_ != 0) {
        PhasingPlayer_ = other.PhasingPlayer_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PhasingPlayer_ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TurnNumber : pb::IMessage<TurnNumber> {
    private static readonly pb::MessageParser<TurnNumber> _parser = new pb::MessageParser<TurnNumber>(() => new TurnNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnNumber(TurnNumber other) : this() {
      isSimulating_ = other.isSimulating_;
      turnNumber_ = other.turnNumber_;
      ussrHand_ = other.ussrHand_;
      usaHand_ = other.usaHand_;
      hasExtraRound_ = other.hasExtraRound_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnNumber Clone() {
      return new TurnNumber(this);
    }

    /// <summary>Field number for the "is_simulating" field.</summary>
    public const int IsSimulatingFieldNumber = 1;
    private int isSimulating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSimulating {
      get { return isSimulating_; }
      set {
        isSimulating_ = value;
      }
    }

    /// <summary>Field number for the "turn_number" field.</summary>
    public const int TurnNumber_FieldNumber = 2;
    private int turnNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurnNumber_ {
      get { return turnNumber_; }
      set {
        turnNumber_ = value;
      }
    }

    /// <summary>Field number for the "ussr_hand" field.</summary>
    public const int UssrHandFieldNumber = 3;
    private int ussrHand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrHand {
      get { return ussrHand_; }
      set {
        ussrHand_ = value;
      }
    }

    /// <summary>Field number for the "usa_hand" field.</summary>
    public const int UsaHandFieldNumber = 4;
    private int usaHand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaHand {
      get { return usaHand_; }
      set {
        usaHand_ = value;
      }
    }

    /// <summary>Field number for the "has_extra_round" field.</summary>
    public const int HasExtraRoundFieldNumber = 5;
    private int hasExtraRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HasExtraRound {
      get { return hasExtraRound_; }
      set {
        hasExtraRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSimulating != other.IsSimulating) return false;
      if (TurnNumber_ != other.TurnNumber_) return false;
      if (UssrHand != other.UssrHand) return false;
      if (UsaHand != other.UsaHand) return false;
      if (HasExtraRound != other.HasExtraRound) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSimulating != 0) hash ^= IsSimulating.GetHashCode();
      if (TurnNumber_ != 0) hash ^= TurnNumber_.GetHashCode();
      if (UssrHand != 0) hash ^= UssrHand.GetHashCode();
      if (UsaHand != 0) hash ^= UsaHand.GetHashCode();
      if (HasExtraRound != 0) hash ^= HasExtraRound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSimulating != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsSimulating);
      }
      if (TurnNumber_ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TurnNumber_);
      }
      if (UssrHand != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UssrHand);
      }
      if (UsaHand != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UsaHand);
      }
      if (HasExtraRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HasExtraRound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSimulating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSimulating);
      }
      if (TurnNumber_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurnNumber_);
      }
      if (UssrHand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrHand);
      }
      if (UsaHand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaHand);
      }
      if (HasExtraRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasExtraRound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnNumber other) {
      if (other == null) {
        return;
      }
      if (other.IsSimulating != 0) {
        IsSimulating = other.IsSimulating;
      }
      if (other.TurnNumber_ != 0) {
        TurnNumber_ = other.TurnNumber_;
      }
      if (other.UssrHand != 0) {
        UssrHand = other.UssrHand;
      }
      if (other.UsaHand != 0) {
        UsaHand = other.UsaHand;
      }
      if (other.HasExtraRound != 0) {
        HasExtraRound = other.HasExtraRound;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsSimulating = input.ReadInt32();
            break;
          }
          case 16: {
            TurnNumber_ = input.ReadInt32();
            break;
          }
          case 24: {
            UssrHand = input.ReadInt32();
            break;
          }
          case 32: {
            UsaHand = input.ReadInt32();
            break;
          }
          case 40: {
            HasExtraRound = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VictoryPointTrack : pb::IMessage<VictoryPointTrack> {
    private static readonly pb::MessageParser<VictoryPointTrack> _parser = new pb::MessageParser<VictoryPointTrack>(() => new VictoryPointTrack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VictoryPointTrack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VictoryPointTrack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VictoryPointTrack(VictoryPointTrack other) : this() {
      victoryPointTrack_ = other.victoryPointTrack_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VictoryPointTrack Clone() {
      return new VictoryPointTrack(this);
    }

    /// <summary>Field number for the "victory_point_track" field.</summary>
    public const int VictoryPointTrack_FieldNumber = 1;
    private int victoryPointTrack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictoryPointTrack_ {
      get { return victoryPointTrack_; }
      set {
        victoryPointTrack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VictoryPointTrack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VictoryPointTrack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VictoryPointTrack_ != other.VictoryPointTrack_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VictoryPointTrack_ != 0) hash ^= VictoryPointTrack_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VictoryPointTrack_ != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VictoryPointTrack_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VictoryPointTrack_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictoryPointTrack_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VictoryPointTrack other) {
      if (other == null) {
        return;
      }
      if (other.VictoryPointTrack_ != 0) {
        VictoryPointTrack_ = other.VictoryPointTrack_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VictoryPointTrack_ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefconLevel : pb::IMessage<DefconLevel> {
    private static readonly pb::MessageParser<DefconLevel> _parser = new pb::MessageParser<DefconLevel>(() => new DefconLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefconLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefconLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefconLevel(DefconLevel other) : this() {
      isSimulating_ = other.isSimulating_;
      defconLevel_ = other.defconLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefconLevel Clone() {
      return new DefconLevel(this);
    }

    /// <summary>Field number for the "is_simulating" field.</summary>
    public const int IsSimulatingFieldNumber = 1;
    private int isSimulating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSimulating {
      get { return isSimulating_; }
      set {
        isSimulating_ = value;
      }
    }

    /// <summary>Field number for the "defcon_level" field.</summary>
    public const int DefconLevel_FieldNumber = 2;
    private int defconLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefconLevel_ {
      get { return defconLevel_; }
      set {
        defconLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefconLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefconLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSimulating != other.IsSimulating) return false;
      if (DefconLevel_ != other.DefconLevel_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSimulating != 0) hash ^= IsSimulating.GetHashCode();
      if (DefconLevel_ != 0) hash ^= DefconLevel_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSimulating != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsSimulating);
      }
      if (DefconLevel_ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefconLevel_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSimulating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSimulating);
      }
      if (DefconLevel_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefconLevel_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefconLevel other) {
      if (other == null) {
        return;
      }
      if (other.IsSimulating != 0) {
        IsSimulating = other.IsSimulating;
      }
      if (other.DefconLevel_ != 0) {
        DefconLevel_ = other.DefconLevel_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsSimulating = input.ReadInt32();
            break;
          }
          case 16: {
            DefconLevel_ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MilitaryOps : pb::IMessage<MilitaryOps> {
    private static readonly pb::MessageParser<MilitaryOps> _parser = new pb::MessageParser<MilitaryOps>(() => new MilitaryOps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MilitaryOps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MilitaryOps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MilitaryOps(MilitaryOps other) : this() {
      ussrMilops_ = other.ussrMilops_;
      usaMilops_ = other.usaMilops_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MilitaryOps Clone() {
      return new MilitaryOps(this);
    }

    /// <summary>Field number for the "ussr_milops" field.</summary>
    public const int UssrMilopsFieldNumber = 1;
    private int ussrMilops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrMilops {
      get { return ussrMilops_; }
      set {
        ussrMilops_ = value;
      }
    }

    /// <summary>Field number for the "usa_milops" field.</summary>
    public const int UsaMilopsFieldNumber = 2;
    private int usaMilops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaMilops {
      get { return usaMilops_; }
      set {
        usaMilops_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MilitaryOps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MilitaryOps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UssrMilops != other.UssrMilops) return false;
      if (UsaMilops != other.UsaMilops) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UssrMilops != 0) hash ^= UssrMilops.GetHashCode();
      if (UsaMilops != 0) hash ^= UsaMilops.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UssrMilops != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UssrMilops);
      }
      if (UsaMilops != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UsaMilops);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UssrMilops != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrMilops);
      }
      if (UsaMilops != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaMilops);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MilitaryOps other) {
      if (other == null) {
        return;
      }
      if (other.UssrMilops != 0) {
        UssrMilops = other.UssrMilops;
      }
      if (other.UsaMilops != 0) {
        UsaMilops = other.UsaMilops;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UssrMilops = input.ReadInt32();
            break;
          }
          case 16: {
            UsaMilops = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpaceRaceTrack : pb::IMessage<SpaceRaceTrack> {
    private static readonly pb::MessageParser<SpaceRaceTrack> _parser = new pb::MessageParser<SpaceRaceTrack>(() => new SpaceRaceTrack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpaceRaceTrack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpaceRaceTrack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpaceRaceTrack(SpaceRaceTrack other) : this() {
      ussrSpace_ = other.ussrSpace_;
      usaSpace_ = other.usaSpace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpaceRaceTrack Clone() {
      return new SpaceRaceTrack(this);
    }

    /// <summary>Field number for the "ussr_space" field.</summary>
    public const int UssrSpaceFieldNumber = 1;
    private int ussrSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrSpace {
      get { return ussrSpace_; }
      set {
        ussrSpace_ = value;
      }
    }

    /// <summary>Field number for the "usa_space" field.</summary>
    public const int UsaSpaceFieldNumber = 2;
    private int usaSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaSpace {
      get { return usaSpace_; }
      set {
        usaSpace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpaceRaceTrack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpaceRaceTrack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UssrSpace != other.UssrSpace) return false;
      if (UsaSpace != other.UsaSpace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UssrSpace != 0) hash ^= UssrSpace.GetHashCode();
      if (UsaSpace != 0) hash ^= UsaSpace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UssrSpace != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UssrSpace);
      }
      if (UsaSpace != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UsaSpace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UssrSpace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrSpace);
      }
      if (UsaSpace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaSpace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpaceRaceTrack other) {
      if (other == null) {
        return;
      }
      if (other.UssrSpace != 0) {
        UssrSpace = other.UssrSpace;
      }
      if (other.UsaSpace != 0) {
        UsaSpace = other.UsaSpace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UssrSpace = input.ReadInt32();
            break;
          }
          case 16: {
            UsaSpace = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardsSpaced : pb::IMessage<CardsSpaced> {
    private static readonly pb::MessageParser<CardsSpaced> _parser = new pb::MessageParser<CardsSpaced>(() => new CardsSpaced());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardsSpaced> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardsSpaced() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardsSpaced(CardsSpaced other) : this() {
      ussrCardsSpaced_ = other.ussrCardsSpaced_;
      usaCardsSpaced_ = other.usaCardsSpaced_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardsSpaced Clone() {
      return new CardsSpaced(this);
    }

    /// <summary>Field number for the "ussr_cards_spaced" field.</summary>
    public const int UssrCardsSpacedFieldNumber = 1;
    private int ussrCardsSpaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrCardsSpaced {
      get { return ussrCardsSpaced_; }
      set {
        ussrCardsSpaced_ = value;
      }
    }

    /// <summary>Field number for the "usa_cards_spaced" field.</summary>
    public const int UsaCardsSpacedFieldNumber = 2;
    private int usaCardsSpaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaCardsSpaced {
      get { return usaCardsSpaced_; }
      set {
        usaCardsSpaced_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardsSpaced);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardsSpaced other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UssrCardsSpaced != other.UssrCardsSpaced) return false;
      if (UsaCardsSpaced != other.UsaCardsSpaced) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UssrCardsSpaced != 0) hash ^= UssrCardsSpaced.GetHashCode();
      if (UsaCardsSpaced != 0) hash ^= UsaCardsSpaced.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UssrCardsSpaced != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UssrCardsSpaced);
      }
      if (UsaCardsSpaced != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UsaCardsSpaced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UssrCardsSpaced != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrCardsSpaced);
      }
      if (UsaCardsSpaced != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaCardsSpaced);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardsSpaced other) {
      if (other == null) {
        return;
      }
      if (other.UssrCardsSpaced != 0) {
        UssrCardsSpaced = other.UssrCardsSpaced;
      }
      if (other.UsaCardsSpaced != 0) {
        UsaCardsSpaced = other.UsaCardsSpaced;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UssrCardsSpaced = input.ReadInt32();
            break;
          }
          case 16: {
            UsaCardsSpaced = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChinaCard : pb::IMessage<ChinaCard> {
    private static readonly pb::MessageParser<ChinaCard> _parser = new pb::MessageParser<ChinaCard>(() => new ChinaCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChinaCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChinaCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChinaCard(ChinaCard other) : this() {
      instanceId_ = other.instanceId_;
      player_ = other.player_;
      faceUp_ = other.faceUp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChinaCard Clone() {
      return new ChinaCard(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "face_up" field.</summary>
    public const int FaceUpFieldNumber = 3;
    private int faceUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceUp {
      get { return faceUp_; }
      set {
        faceUp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChinaCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChinaCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (Player != other.Player) return false;
      if (FaceUp != other.FaceUp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (FaceUp != 0) hash ^= FaceUp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceId);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Player);
      }
      if (FaceUp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FaceUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (FaceUp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceUp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChinaCard other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.FaceUp != 0) {
        FaceUp = other.FaceUp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 16: {
            Player = input.ReadInt32();
            break;
          }
          case 24: {
            FaceUp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameOver : pb::IMessage<GameOver> {
    private static readonly pb::MessageParser<GameOver> _parser = new pb::MessageParser<GameOver>(() => new GameOver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver(GameOver other) : this() {
      winner_ = other.winner_;
      winType_ = other.winType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver Clone() {
      return new GameOver(this);
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 1;
    private int winner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "win_type" field.</summary>
    public const int WinTypeFieldNumber = 2;
    private int winType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinType {
      get { return winType_; }
      set {
        winType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Winner != other.Winner) return false;
      if (WinType != other.WinType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Winner != 0) hash ^= Winner.GetHashCode();
      if (WinType != 0) hash ^= WinType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Winner != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Winner);
      }
      if (WinType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Winner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Winner);
      }
      if (WinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOver other) {
      if (other == null) {
        return;
      }
      if (other.Winner != 0) {
        Winner = other.Winner;
      }
      if (other.WinType != 0) {
        WinType = other.WinType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Winner = input.ReadInt32();
            break;
          }
          case 16: {
            WinType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AssignSides : pb::IMessage<AssignSides> {
    private static readonly pb::MessageParser<AssignSides> _parser = new pb::MessageParser<AssignSides>(() => new AssignSides());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssignSides> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssignSides() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssignSides(AssignSides other) : this() {
      ussrPlayerId_ = other.ussrPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssignSides Clone() {
      return new AssignSides(this);
    }

    /// <summary>Field number for the "ussr_player_id" field.</summary>
    public const int UssrPlayerIdFieldNumber = 1;
    private int ussrPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrPlayerId {
      get { return ussrPlayerId_; }
      set {
        ussrPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssignSides);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssignSides other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UssrPlayerId != other.UssrPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UssrPlayerId != 0) hash ^= UssrPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UssrPlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UssrPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UssrPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssignSides other) {
      if (other == null) {
        return;
      }
      if (other.UssrPlayerId != 0) {
        UssrPlayerId = other.UssrPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UssrPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Realignment : pb::IMessage<Realignment> {
    private static readonly pb::MessageParser<Realignment> _parser = new pb::MessageParser<Realignment>(() => new Realignment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Realignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Realignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Realignment(Realignment other) : this() {
      realignPlayerIndex_ = other.realignPlayerIndex_;
      country_ = other.country_;
      ussrRollResult_ = other.ussrRollResult_;
      usaRollResult_ = other.usaRollResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Realignment Clone() {
      return new Realignment(this);
    }

    /// <summary>Field number for the "realign_player_index" field.</summary>
    public const int RealignPlayerIndexFieldNumber = 1;
    private int realignPlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RealignPlayerIndex {
      get { return realignPlayerIndex_; }
      set {
        realignPlayerIndex_ = value;
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 2;
    private int country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Country {
      get { return country_; }
      set {
        country_ = value;
      }
    }

    /// <summary>Field number for the "ussr_roll_result" field.</summary>
    public const int UssrRollResultFieldNumber = 3;
    private int ussrRollResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrRollResult {
      get { return ussrRollResult_; }
      set {
        ussrRollResult_ = value;
      }
    }

    /// <summary>Field number for the "usa_roll_result" field.</summary>
    public const int UsaRollResultFieldNumber = 4;
    private int usaRollResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaRollResult {
      get { return usaRollResult_; }
      set {
        usaRollResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Realignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Realignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RealignPlayerIndex != other.RealignPlayerIndex) return false;
      if (Country != other.Country) return false;
      if (UssrRollResult != other.UssrRollResult) return false;
      if (UsaRollResult != other.UsaRollResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RealignPlayerIndex != 0) hash ^= RealignPlayerIndex.GetHashCode();
      if (Country != 0) hash ^= Country.GetHashCode();
      if (UssrRollResult != 0) hash ^= UssrRollResult.GetHashCode();
      if (UsaRollResult != 0) hash ^= UsaRollResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RealignPlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RealignPlayerIndex);
      }
      if (Country != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Country);
      }
      if (UssrRollResult != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UssrRollResult);
      }
      if (UsaRollResult != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UsaRollResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RealignPlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealignPlayerIndex);
      }
      if (Country != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Country);
      }
      if (UssrRollResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrRollResult);
      }
      if (UsaRollResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaRollResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Realignment other) {
      if (other == null) {
        return;
      }
      if (other.RealignPlayerIndex != 0) {
        RealignPlayerIndex = other.RealignPlayerIndex;
      }
      if (other.Country != 0) {
        Country = other.Country;
      }
      if (other.UssrRollResult != 0) {
        UssrRollResult = other.UssrRollResult;
      }
      if (other.UsaRollResult != 0) {
        UsaRollResult = other.UsaRollResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RealignPlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Country = input.ReadInt32();
            break;
          }
          case 24: {
            UssrRollResult = input.ReadInt32();
            break;
          }
          case 32: {
            UsaRollResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PushResolveCard : pb::IMessage<PushResolveCard> {
    private static readonly pb::MessageParser<PushResolveCard> _parser = new pb::MessageParser<PushResolveCard>(() => new PushResolveCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushResolveCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushResolveCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushResolveCard(PushResolveCard other) : this() {
      card_ = other.card_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushResolveCard Clone() {
      return new PushResolveCard(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private int card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushResolveCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushResolveCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Card != other.Card) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Card != 0) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushResolveCard other) {
      if (other == null) {
        return;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PopResolveCard : pb::IMessage<PopResolveCard> {
    private static readonly pb::MessageParser<PopResolveCard> _parser = new pb::MessageParser<PopResolveCard>(() => new PopResolveCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PopResolveCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopResolveCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopResolveCard(PopResolveCard other) : this() {
      card_ = other.card_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopResolveCard Clone() {
      return new PopResolveCard(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private int card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PopResolveCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PopResolveCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Card != other.Card) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Card != 0) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PopResolveCard other) {
      if (other == null) {
        return;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PushRevealCard : pb::IMessage<PushRevealCard> {
    private static readonly pb::MessageParser<PushRevealCard> _parser = new pb::MessageParser<PushRevealCard>(() => new PushRevealCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushRevealCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRevealCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRevealCard(PushRevealCard other) : this() {
      card_ = other.card_;
      player_ = other.player_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushRevealCard Clone() {
      return new PushRevealCard(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private int card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushRevealCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushRevealCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Card != other.Card) return false;
      if (Player != other.Player) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Card != 0) hash ^= Card.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushRevealCard other) {
      if (other == null) {
        return;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
          case 16: {
            Player = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PopRevealCard : pb::IMessage<PopRevealCard> {
    private static readonly pb::MessageParser<PopRevealCard> _parser = new pb::MessageParser<PopRevealCard>(() => new PopRevealCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PopRevealCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopRevealCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopRevealCard(PopRevealCard other) : this() {
      card_ = other.card_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopRevealCard Clone() {
      return new PopRevealCard(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private int card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PopRevealCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PopRevealCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Card != other.Card) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Card != 0) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PopRevealCard other) {
      if (other == null) {
        return;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetRevealCardPlayer : pb::IMessage<SetRevealCardPlayer> {
    private static readonly pb::MessageParser<SetRevealCardPlayer> _parser = new pb::MessageParser<SetRevealCardPlayer>(() => new SetRevealCardPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRevealCardPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRevealCardPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRevealCardPlayer(SetRevealCardPlayer other) : this() {
      playerIndex_ = other.playerIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRevealCardPlayer Clone() {
      return new SetRevealCardPlayer(this);
    }

    /// <summary>Field number for the "player_index" field.</summary>
    public const int PlayerIndexFieldNumber = 1;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRevealCardPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRevealCardPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIndex != other.PlayerIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRevealCardPlayer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetHeadlineCardRevealed : pb::IMessage<SetHeadlineCardRevealed> {
    private static readonly pb::MessageParser<SetHeadlineCardRevealed> _parser = new pb::MessageParser<SetHeadlineCardRevealed>(() => new SetHeadlineCardRevealed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetHeadlineCardRevealed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadlineCardRevealed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadlineCardRevealed(SetHeadlineCardRevealed other) : this() {
      playerIndex_ = other.playerIndex_;
      revealed_ = other.revealed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadlineCardRevealed Clone() {
      return new SetHeadlineCardRevealed(this);
    }

    /// <summary>Field number for the "player_index" field.</summary>
    public const int PlayerIndexFieldNumber = 1;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "revealed" field.</summary>
    public const int RevealedFieldNumber = 2;
    private int revealed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Revealed {
      get { return revealed_; }
      set {
        revealed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetHeadlineCardRevealed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetHeadlineCardRevealed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIndex != other.PlayerIndex) return false;
      if (Revealed != other.Revealed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      if (Revealed != 0) hash ^= Revealed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIndex);
      }
      if (Revealed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Revealed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (Revealed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Revealed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetHeadlineCardRevealed other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      if (other.Revealed != 0) {
        Revealed = other.Revealed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Revealed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadProgress : pb::IMessage<LoadProgress> {
    private static readonly pb::MessageParser<LoadProgress> _parser = new pb::MessageParser<LoadProgress>(() => new LoadProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadProgress(LoadProgress other) : this() {
      progress_ = other.progress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadProgress Clone() {
      return new LoadProgress(this);
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private float progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Progress, other.Progress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Progress);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Progress != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadProgress other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Progress = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommitPlayerDecision : pb::IMessage<CommitPlayerDecision> {
    private static readonly pb::MessageParser<CommitPlayerDecision> _parser = new pb::MessageParser<CommitPlayerDecision>(() => new CommitPlayerDecision());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitPlayerDecision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitPlayerDecision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitPlayerDecision(CommitPlayerDecision other) : this() {
      moveCount_ = other.moveCount_;
      winnerPlayerIndex_ = other.winnerPlayerIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitPlayerDecision Clone() {
      return new CommitPlayerDecision(this);
    }

    /// <summary>Field number for the "move_count" field.</summary>
    public const int MoveCountFieldNumber = 1;
    private int moveCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveCount {
      get { return moveCount_; }
      set {
        moveCount_ = value;
      }
    }

    /// <summary>Field number for the "winner_player_index" field.</summary>
    public const int WinnerPlayerIndexFieldNumber = 2;
    private int winnerPlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinnerPlayerIndex {
      get { return winnerPlayerIndex_; }
      set {
        winnerPlayerIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitPlayerDecision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitPlayerDecision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoveCount != other.MoveCount) return false;
      if (WinnerPlayerIndex != other.WinnerPlayerIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoveCount != 0) hash ^= MoveCount.GetHashCode();
      if (WinnerPlayerIndex != 0) hash ^= WinnerPlayerIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MoveCount);
      }
      if (WinnerPlayerIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinnerPlayerIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoveCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveCount);
      }
      if (WinnerPlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerPlayerIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitPlayerDecision other) {
      if (other == null) {
        return;
      }
      if (other.MoveCount != 0) {
        MoveCount = other.MoveCount;
      }
      if (other.WinnerPlayerIndex != 0) {
        WinnerPlayerIndex = other.WinnerPlayerIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MoveCount = input.ReadInt32();
            break;
          }
          case 16: {
            WinnerPlayerIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoupRoll : pb::IMessage<CoupRoll> {
    private static readonly pb::MessageParser<CoupRoll> _parser = new pb::MessageParser<CoupRoll>(() => new CoupRoll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoupRoll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoupRoll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoupRoll(CoupRoll other) : this() {
      playerIndex_ = other.playerIndex_;
      countryId_ = other.countryId_;
      roll_ = other.roll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoupRoll Clone() {
      return new CoupRoll(this);
    }

    /// <summary>Field number for the "player_index" field.</summary>
    public const int PlayerIndexFieldNumber = 1;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "country_id" field.</summary>
    public const int CountryIdFieldNumber = 2;
    private int countryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryId {
      get { return countryId_; }
      set {
        countryId_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 3;
    private int roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoupRoll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoupRoll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIndex != other.PlayerIndex) return false;
      if (CountryId != other.CountryId) return false;
      if (Roll != other.Roll) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      if (CountryId != 0) hash ^= CountryId.GetHashCode();
      if (Roll != 0) hash ^= Roll.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIndex);
      }
      if (CountryId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CountryId);
      }
      if (Roll != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Roll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (CountryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryId);
      }
      if (Roll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roll);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoupRoll other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      if (other.CountryId != 0) {
        CountryId = other.CountryId;
      }
      if (other.Roll != 0) {
        Roll = other.Roll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            CountryId = input.ReadInt32();
            break;
          }
          case 24: {
            Roll = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WarRoll : pb::IMessage<WarRoll> {
    private static readonly pb::MessageParser<WarRoll> _parser = new pb::MessageParser<WarRoll>(() => new WarRoll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarRoll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoll(WarRoll other) : this() {
      playerIndex_ = other.playerIndex_;
      countryId_ = other.countryId_;
      roll_ = other.roll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarRoll Clone() {
      return new WarRoll(this);
    }

    /// <summary>Field number for the "player_index" field.</summary>
    public const int PlayerIndexFieldNumber = 1;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "country_id" field.</summary>
    public const int CountryIdFieldNumber = 2;
    private int countryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryId {
      get { return countryId_; }
      set {
        countryId_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 3;
    private int roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarRoll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarRoll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIndex != other.PlayerIndex) return false;
      if (CountryId != other.CountryId) return false;
      if (Roll != other.Roll) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      if (CountryId != 0) hash ^= CountryId.GetHashCode();
      if (Roll != 0) hash ^= Roll.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIndex);
      }
      if (CountryId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CountryId);
      }
      if (Roll != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Roll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (CountryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryId);
      }
      if (Roll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roll);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarRoll other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      if (other.CountryId != 0) {
        CountryId = other.CountryId;
      }
      if (other.Roll != 0) {
        Roll = other.Roll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            CountryId = input.ReadInt32();
            break;
          }
          case 24: {
            Roll = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpaceRaceRoll : pb::IMessage<SpaceRaceRoll> {
    private static readonly pb::MessageParser<SpaceRaceRoll> _parser = new pb::MessageParser<SpaceRaceRoll>(() => new SpaceRaceRoll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpaceRaceRoll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpaceRaceRoll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpaceRaceRoll(SpaceRaceRoll other) : this() {
      isSimulating_ = other.isSimulating_;
      roll_ = other.roll_;
      success_ = other.success_;
      card_ = other.card_;
      spaceRacePlayerIndex_ = other.spaceRacePlayerIndex_;
      spaceRaceCurrentLevel_ = other.spaceRaceCurrentLevel_;
      spaceRaceOpponentLevel_ = other.spaceRaceOpponentLevel_;
      spaceRaceRemainingAttempts_ = other.spaceRaceRemainingAttempts_;
      spaceRaceNextLevel_ = other.spaceRaceNextLevel_;
      spaceRaceRequiredOps_ = other.spaceRaceRequiredOps_;
      spaceRaceRequiredRoll_ = other.spaceRaceRequiredRoll_;
      spaceRaceAdvanceVictoryPoints_ = other.spaceRaceAdvanceVictoryPoints_;
      spaceRaceAdvanceGainBonus_ = other.spaceRaceAdvanceGainBonus_;
      spaceRaceAdvanceRemoveBonus_ = other.spaceRaceAdvanceRemoveBonus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpaceRaceRoll Clone() {
      return new SpaceRaceRoll(this);
    }

    /// <summary>Field number for the "is_simulating" field.</summary>
    public const int IsSimulatingFieldNumber = 1;
    private int isSimulating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSimulating {
      get { return isSimulating_; }
      set {
        isSimulating_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 2;
    private int roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private int success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 4;
    private int card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "space_race_player_index" field.</summary>
    public const int SpaceRacePlayerIndexFieldNumber = 5;
    private int spaceRacePlayerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRacePlayerIndex {
      get { return spaceRacePlayerIndex_; }
      set {
        spaceRacePlayerIndex_ = value;
      }
    }

    /// <summary>Field number for the "space_race_current_level" field.</summary>
    public const int SpaceRaceCurrentLevelFieldNumber = 6;
    private int spaceRaceCurrentLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceCurrentLevel {
      get { return spaceRaceCurrentLevel_; }
      set {
        spaceRaceCurrentLevel_ = value;
      }
    }

    /// <summary>Field number for the "space_race_opponent_level" field.</summary>
    public const int SpaceRaceOpponentLevelFieldNumber = 7;
    private int spaceRaceOpponentLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceOpponentLevel {
      get { return spaceRaceOpponentLevel_; }
      set {
        spaceRaceOpponentLevel_ = value;
      }
    }

    /// <summary>Field number for the "space_race_remaining_attempts" field.</summary>
    public const int SpaceRaceRemainingAttemptsFieldNumber = 8;
    private int spaceRaceRemainingAttempts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceRemainingAttempts {
      get { return spaceRaceRemainingAttempts_; }
      set {
        spaceRaceRemainingAttempts_ = value;
      }
    }

    /// <summary>Field number for the "space_race_next_level" field.</summary>
    public const int SpaceRaceNextLevelFieldNumber = 9;
    private int spaceRaceNextLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceNextLevel {
      get { return spaceRaceNextLevel_; }
      set {
        spaceRaceNextLevel_ = value;
      }
    }

    /// <summary>Field number for the "space_race_required_ops" field.</summary>
    public const int SpaceRaceRequiredOpsFieldNumber = 10;
    private int spaceRaceRequiredOps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceRequiredOps {
      get { return spaceRaceRequiredOps_; }
      set {
        spaceRaceRequiredOps_ = value;
      }
    }

    /// <summary>Field number for the "space_race_required_roll" field.</summary>
    public const int SpaceRaceRequiredRollFieldNumber = 11;
    private int spaceRaceRequiredRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceRequiredRoll {
      get { return spaceRaceRequiredRoll_; }
      set {
        spaceRaceRequiredRoll_ = value;
      }
    }

    /// <summary>Field number for the "space_race_advance_victory_points" field.</summary>
    public const int SpaceRaceAdvanceVictoryPointsFieldNumber = 12;
    private int spaceRaceAdvanceVictoryPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceAdvanceVictoryPoints {
      get { return spaceRaceAdvanceVictoryPoints_; }
      set {
        spaceRaceAdvanceVictoryPoints_ = value;
      }
    }

    /// <summary>Field number for the "space_race_advance_gain_bonus" field.</summary>
    public const int SpaceRaceAdvanceGainBonusFieldNumber = 13;
    private int spaceRaceAdvanceGainBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceAdvanceGainBonus {
      get { return spaceRaceAdvanceGainBonus_; }
      set {
        spaceRaceAdvanceGainBonus_ = value;
      }
    }

    /// <summary>Field number for the "space_race_advance_remove_bonus" field.</summary>
    public const int SpaceRaceAdvanceRemoveBonusFieldNumber = 14;
    private int spaceRaceAdvanceRemoveBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRaceAdvanceRemoveBonus {
      get { return spaceRaceAdvanceRemoveBonus_; }
      set {
        spaceRaceAdvanceRemoveBonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpaceRaceRoll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpaceRaceRoll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSimulating != other.IsSimulating) return false;
      if (Roll != other.Roll) return false;
      if (Success != other.Success) return false;
      if (Card != other.Card) return false;
      if (SpaceRacePlayerIndex != other.SpaceRacePlayerIndex) return false;
      if (SpaceRaceCurrentLevel != other.SpaceRaceCurrentLevel) return false;
      if (SpaceRaceOpponentLevel != other.SpaceRaceOpponentLevel) return false;
      if (SpaceRaceRemainingAttempts != other.SpaceRaceRemainingAttempts) return false;
      if (SpaceRaceNextLevel != other.SpaceRaceNextLevel) return false;
      if (SpaceRaceRequiredOps != other.SpaceRaceRequiredOps) return false;
      if (SpaceRaceRequiredRoll != other.SpaceRaceRequiredRoll) return false;
      if (SpaceRaceAdvanceVictoryPoints != other.SpaceRaceAdvanceVictoryPoints) return false;
      if (SpaceRaceAdvanceGainBonus != other.SpaceRaceAdvanceGainBonus) return false;
      if (SpaceRaceAdvanceRemoveBonus != other.SpaceRaceAdvanceRemoveBonus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSimulating != 0) hash ^= IsSimulating.GetHashCode();
      if (Roll != 0) hash ^= Roll.GetHashCode();
      if (Success != 0) hash ^= Success.GetHashCode();
      if (Card != 0) hash ^= Card.GetHashCode();
      if (SpaceRacePlayerIndex != 0) hash ^= SpaceRacePlayerIndex.GetHashCode();
      if (SpaceRaceCurrentLevel != 0) hash ^= SpaceRaceCurrentLevel.GetHashCode();
      if (SpaceRaceOpponentLevel != 0) hash ^= SpaceRaceOpponentLevel.GetHashCode();
      if (SpaceRaceRemainingAttempts != 0) hash ^= SpaceRaceRemainingAttempts.GetHashCode();
      if (SpaceRaceNextLevel != 0) hash ^= SpaceRaceNextLevel.GetHashCode();
      if (SpaceRaceRequiredOps != 0) hash ^= SpaceRaceRequiredOps.GetHashCode();
      if (SpaceRaceRequiredRoll != 0) hash ^= SpaceRaceRequiredRoll.GetHashCode();
      if (SpaceRaceAdvanceVictoryPoints != 0) hash ^= SpaceRaceAdvanceVictoryPoints.GetHashCode();
      if (SpaceRaceAdvanceGainBonus != 0) hash ^= SpaceRaceAdvanceGainBonus.GetHashCode();
      if (SpaceRaceAdvanceRemoveBonus != 0) hash ^= SpaceRaceAdvanceRemoveBonus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSimulating != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsSimulating);
      }
      if (Roll != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Roll);
      }
      if (Success != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Success);
      }
      if (Card != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Card);
      }
      if (SpaceRacePlayerIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpaceRacePlayerIndex);
      }
      if (SpaceRaceCurrentLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SpaceRaceCurrentLevel);
      }
      if (SpaceRaceOpponentLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SpaceRaceOpponentLevel);
      }
      if (SpaceRaceRemainingAttempts != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SpaceRaceRemainingAttempts);
      }
      if (SpaceRaceNextLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SpaceRaceNextLevel);
      }
      if (SpaceRaceRequiredOps != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SpaceRaceRequiredOps);
      }
      if (SpaceRaceRequiredRoll != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpaceRaceRequiredRoll);
      }
      if (SpaceRaceAdvanceVictoryPoints != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SpaceRaceAdvanceVictoryPoints);
      }
      if (SpaceRaceAdvanceGainBonus != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SpaceRaceAdvanceGainBonus);
      }
      if (SpaceRaceAdvanceRemoveBonus != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SpaceRaceAdvanceRemoveBonus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSimulating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSimulating);
      }
      if (Roll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roll);
      }
      if (Success != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Success);
      }
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (SpaceRacePlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRacePlayerIndex);
      }
      if (SpaceRaceCurrentLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceCurrentLevel);
      }
      if (SpaceRaceOpponentLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceOpponentLevel);
      }
      if (SpaceRaceRemainingAttempts != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceRemainingAttempts);
      }
      if (SpaceRaceNextLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceNextLevel);
      }
      if (SpaceRaceRequiredOps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceRequiredOps);
      }
      if (SpaceRaceRequiredRoll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceRequiredRoll);
      }
      if (SpaceRaceAdvanceVictoryPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceAdvanceVictoryPoints);
      }
      if (SpaceRaceAdvanceGainBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceAdvanceGainBonus);
      }
      if (SpaceRaceAdvanceRemoveBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRaceAdvanceRemoveBonus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpaceRaceRoll other) {
      if (other == null) {
        return;
      }
      if (other.IsSimulating != 0) {
        IsSimulating = other.IsSimulating;
      }
      if (other.Roll != 0) {
        Roll = other.Roll;
      }
      if (other.Success != 0) {
        Success = other.Success;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
      if (other.SpaceRacePlayerIndex != 0) {
        SpaceRacePlayerIndex = other.SpaceRacePlayerIndex;
      }
      if (other.SpaceRaceCurrentLevel != 0) {
        SpaceRaceCurrentLevel = other.SpaceRaceCurrentLevel;
      }
      if (other.SpaceRaceOpponentLevel != 0) {
        SpaceRaceOpponentLevel = other.SpaceRaceOpponentLevel;
      }
      if (other.SpaceRaceRemainingAttempts != 0) {
        SpaceRaceRemainingAttempts = other.SpaceRaceRemainingAttempts;
      }
      if (other.SpaceRaceNextLevel != 0) {
        SpaceRaceNextLevel = other.SpaceRaceNextLevel;
      }
      if (other.SpaceRaceRequiredOps != 0) {
        SpaceRaceRequiredOps = other.SpaceRaceRequiredOps;
      }
      if (other.SpaceRaceRequiredRoll != 0) {
        SpaceRaceRequiredRoll = other.SpaceRaceRequiredRoll;
      }
      if (other.SpaceRaceAdvanceVictoryPoints != 0) {
        SpaceRaceAdvanceVictoryPoints = other.SpaceRaceAdvanceVictoryPoints;
      }
      if (other.SpaceRaceAdvanceGainBonus != 0) {
        SpaceRaceAdvanceGainBonus = other.SpaceRaceAdvanceGainBonus;
      }
      if (other.SpaceRaceAdvanceRemoveBonus != 0) {
        SpaceRaceAdvanceRemoveBonus = other.SpaceRaceAdvanceRemoveBonus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsSimulating = input.ReadInt32();
            break;
          }
          case 16: {
            Roll = input.ReadInt32();
            break;
          }
          case 24: {
            Success = input.ReadInt32();
            break;
          }
          case 32: {
            Card = input.ReadInt32();
            break;
          }
          case 40: {
            SpaceRacePlayerIndex = input.ReadInt32();
            break;
          }
          case 48: {
            SpaceRaceCurrentLevel = input.ReadInt32();
            break;
          }
          case 56: {
            SpaceRaceOpponentLevel = input.ReadInt32();
            break;
          }
          case 64: {
            SpaceRaceRemainingAttempts = input.ReadInt32();
            break;
          }
          case 72: {
            SpaceRaceNextLevel = input.ReadInt32();
            break;
          }
          case 80: {
            SpaceRaceRequiredOps = input.ReadInt32();
            break;
          }
          case 88: {
            SpaceRaceRequiredRoll = input.ReadInt32();
            break;
          }
          case 96: {
            SpaceRaceAdvanceVictoryPoints = input.ReadInt32();
            break;
          }
          case 104: {
            SpaceRaceAdvanceGainBonus = input.ReadInt32();
            break;
          }
          case 112: {
            SpaceRaceAdvanceRemoveBonus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrapRoll : pb::IMessage<TrapRoll> {
    private static readonly pb::MessageParser<TrapRoll> _parser = new pb::MessageParser<TrapRoll>(() => new TrapRoll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrapRoll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapRoll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapRoll(TrapRoll other) : this() {
      playerId_ = other.playerId_;
      roll_ = other.roll_;
      trapSourceCardId_ = other.trapSourceCardId_;
      trapDiscardCardId_ = other.trapDiscardCardId_;
      trapRequiredOperationsPoints_ = other.trapRequiredOperationsPoints_;
      trapEscapeRollTarget_ = other.trapEscapeRollTarget_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapRoll Clone() {
      return new TrapRoll(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 2;
    private int roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "trap_source_card_id" field.</summary>
    public const int TrapSourceCardIdFieldNumber = 3;
    private int trapSourceCardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrapSourceCardId {
      get { return trapSourceCardId_; }
      set {
        trapSourceCardId_ = value;
      }
    }

    /// <summary>Field number for the "trap_discard_card_id" field.</summary>
    public const int TrapDiscardCardIdFieldNumber = 4;
    private int trapDiscardCardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrapDiscardCardId {
      get { return trapDiscardCardId_; }
      set {
        trapDiscardCardId_ = value;
      }
    }

    /// <summary>Field number for the "trap_required_operations_points" field.</summary>
    public const int TrapRequiredOperationsPointsFieldNumber = 5;
    private int trapRequiredOperationsPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrapRequiredOperationsPoints {
      get { return trapRequiredOperationsPoints_; }
      set {
        trapRequiredOperationsPoints_ = value;
      }
    }

    /// <summary>Field number for the "trap_escape_roll_target" field.</summary>
    public const int TrapEscapeRollTargetFieldNumber = 6;
    private int trapEscapeRollTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrapEscapeRollTarget {
      get { return trapEscapeRollTarget_; }
      set {
        trapEscapeRollTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrapRoll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrapRoll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Roll != other.Roll) return false;
      if (TrapSourceCardId != other.TrapSourceCardId) return false;
      if (TrapDiscardCardId != other.TrapDiscardCardId) return false;
      if (TrapRequiredOperationsPoints != other.TrapRequiredOperationsPoints) return false;
      if (TrapEscapeRollTarget != other.TrapEscapeRollTarget) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Roll != 0) hash ^= Roll.GetHashCode();
      if (TrapSourceCardId != 0) hash ^= TrapSourceCardId.GetHashCode();
      if (TrapDiscardCardId != 0) hash ^= TrapDiscardCardId.GetHashCode();
      if (TrapRequiredOperationsPoints != 0) hash ^= TrapRequiredOperationsPoints.GetHashCode();
      if (TrapEscapeRollTarget != 0) hash ^= TrapEscapeRollTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Roll != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Roll);
      }
      if (TrapSourceCardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TrapSourceCardId);
      }
      if (TrapDiscardCardId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TrapDiscardCardId);
      }
      if (TrapRequiredOperationsPoints != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TrapRequiredOperationsPoints);
      }
      if (TrapEscapeRollTarget != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TrapEscapeRollTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Roll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roll);
      }
      if (TrapSourceCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrapSourceCardId);
      }
      if (TrapDiscardCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrapDiscardCardId);
      }
      if (TrapRequiredOperationsPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrapRequiredOperationsPoints);
      }
      if (TrapEscapeRollTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrapEscapeRollTarget);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrapRoll other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Roll != 0) {
        Roll = other.Roll;
      }
      if (other.TrapSourceCardId != 0) {
        TrapSourceCardId = other.TrapSourceCardId;
      }
      if (other.TrapDiscardCardId != 0) {
        TrapDiscardCardId = other.TrapDiscardCardId;
      }
      if (other.TrapRequiredOperationsPoints != 0) {
        TrapRequiredOperationsPoints = other.TrapRequiredOperationsPoints;
      }
      if (other.TrapEscapeRollTarget != 0) {
        TrapEscapeRollTarget = other.TrapEscapeRollTarget;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Roll = input.ReadInt32();
            break;
          }
          case 24: {
            TrapSourceCardId = input.ReadInt32();
            break;
          }
          case 32: {
            TrapDiscardCardId = input.ReadInt32();
            break;
          }
          case 40: {
            TrapRequiredOperationsPoints = input.ReadInt32();
            break;
          }
          case 48: {
            TrapEscapeRollTarget = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoringCardPlayed : pb::IMessage<ScoringCardPlayed> {
    private static readonly pb::MessageParser<ScoringCardPlayed> _parser = new pb::MessageParser<ScoringCardPlayed>(() => new ScoringCardPlayed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoringCardPlayed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoringCardPlayed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoringCardPlayed(ScoringCardPlayed other) : this() {
      cardId_ = other.cardId_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoringCardPlayed Clone() {
      return new ScoringCardPlayed(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoringCardPlayed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoringCardPlayed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoringCardPlayed other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FinalScoring : pb::IMessage<FinalScoring> {
    private static readonly pb::MessageParser<FinalScoring> _parser = new pb::MessageParser<FinalScoring>(() => new FinalScoring());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinalScoring> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinalScoring() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinalScoring(FinalScoring other) : this() {
      victoryPointsUssr_ = other.victoryPointsUssr_;
      victoryPointsUsa_ = other.victoryPointsUsa_;
      europeanControlWinner_ = other.europeanControlWinner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinalScoring Clone() {
      return new FinalScoring(this);
    }

    /// <summary>Field number for the "victory_points_ussr" field.</summary>
    public const int VictoryPointsUssrFieldNumber = 1;
    private int victoryPointsUssr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictoryPointsUssr {
      get { return victoryPointsUssr_; }
      set {
        victoryPointsUssr_ = value;
      }
    }

    /// <summary>Field number for the "victory_points_usa" field.</summary>
    public const int VictoryPointsUsaFieldNumber = 2;
    private int victoryPointsUsa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictoryPointsUsa {
      get { return victoryPointsUsa_; }
      set {
        victoryPointsUsa_ = value;
      }
    }

    /// <summary>Field number for the "european_control_winner" field.</summary>
    public const int EuropeanControlWinnerFieldNumber = 3;
    private int europeanControlWinner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EuropeanControlWinner {
      get { return europeanControlWinner_; }
      set {
        europeanControlWinner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinalScoring);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinalScoring other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VictoryPointsUssr != other.VictoryPointsUssr) return false;
      if (VictoryPointsUsa != other.VictoryPointsUsa) return false;
      if (EuropeanControlWinner != other.EuropeanControlWinner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VictoryPointsUssr != 0) hash ^= VictoryPointsUssr.GetHashCode();
      if (VictoryPointsUsa != 0) hash ^= VictoryPointsUsa.GetHashCode();
      if (EuropeanControlWinner != 0) hash ^= EuropeanControlWinner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VictoryPointsUssr != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VictoryPointsUssr);
      }
      if (VictoryPointsUsa != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VictoryPointsUsa);
      }
      if (EuropeanControlWinner != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EuropeanControlWinner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VictoryPointsUssr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictoryPointsUssr);
      }
      if (VictoryPointsUsa != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictoryPointsUsa);
      }
      if (EuropeanControlWinner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EuropeanControlWinner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinalScoring other) {
      if (other == null) {
        return;
      }
      if (other.VictoryPointsUssr != 0) {
        VictoryPointsUssr = other.VictoryPointsUssr;
      }
      if (other.VictoryPointsUsa != 0) {
        VictoryPointsUsa = other.VictoryPointsUsa;
      }
      if (other.EuropeanControlWinner != 0) {
        EuropeanControlWinner = other.EuropeanControlWinner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VictoryPointsUssr = input.ReadInt32();
            break;
          }
          case 16: {
            VictoryPointsUsa = input.ReadInt32();
            break;
          }
          case 24: {
            EuropeanControlWinner = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectRoll : pb::IMessage<EffectRoll> {
    private static readonly pb::MessageParser<EffectRoll> _parser = new pb::MessageParser<EffectRoll>(() => new EffectRoll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectRoll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoll(EffectRoll other) : this() {
      cardId_ = other.cardId_;
      ussrRoll_ = other.ussrRoll_;
      ussrModify_ = other.ussrModify_;
      usaRoll_ = other.usaRoll_;
      usaModify_ = other.usaModify_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectRoll Clone() {
      return new EffectRoll(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "ussr_roll" field.</summary>
    public const int UssrRollFieldNumber = 2;
    private int ussrRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrRoll {
      get { return ussrRoll_; }
      set {
        ussrRoll_ = value;
      }
    }

    /// <summary>Field number for the "ussr_modify" field.</summary>
    public const int UssrModifyFieldNumber = 3;
    private int ussrModify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrModify {
      get { return ussrModify_; }
      set {
        ussrModify_ = value;
      }
    }

    /// <summary>Field number for the "usa_roll" field.</summary>
    public const int UsaRollFieldNumber = 4;
    private int usaRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaRoll {
      get { return usaRoll_; }
      set {
        usaRoll_ = value;
      }
    }

    /// <summary>Field number for the "usa_modify" field.</summary>
    public const int UsaModifyFieldNumber = 5;
    private int usaModify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaModify {
      get { return usaModify_; }
      set {
        usaModify_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectRoll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectRoll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (UssrRoll != other.UssrRoll) return false;
      if (UssrModify != other.UssrModify) return false;
      if (UsaRoll != other.UsaRoll) return false;
      if (UsaModify != other.UsaModify) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (UssrRoll != 0) hash ^= UssrRoll.GetHashCode();
      if (UssrModify != 0) hash ^= UssrModify.GetHashCode();
      if (UsaRoll != 0) hash ^= UsaRoll.GetHashCode();
      if (UsaModify != 0) hash ^= UsaModify.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (UssrRoll != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UssrRoll);
      }
      if (UssrModify != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UssrModify);
      }
      if (UsaRoll != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UsaRoll);
      }
      if (UsaModify != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UsaModify);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (UssrRoll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrRoll);
      }
      if (UssrModify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrModify);
      }
      if (UsaRoll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaRoll);
      }
      if (UsaModify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaModify);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectRoll other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.UssrRoll != 0) {
        UssrRoll = other.UssrRoll;
      }
      if (other.UssrModify != 0) {
        UssrModify = other.UssrModify;
      }
      if (other.UsaRoll != 0) {
        UsaRoll = other.UsaRoll;
      }
      if (other.UsaModify != 0) {
        UsaModify = other.UsaModify;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
          case 16: {
            UssrRoll = input.ReadInt32();
            break;
          }
          case 24: {
            UssrModify = input.ReadInt32();
            break;
          }
          case 32: {
            UsaRoll = input.ReadInt32();
            break;
          }
          case 40: {
            UsaModify = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndTurn : pb::IMessage<EndTurn> {
    private static readonly pb::MessageParser<EndTurn> _parser = new pb::MessageParser<EndTurn>(() => new EndTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndTurn(EndTurn other) : this() {
      ussrOps_ = other.ussrOps_;
      usaOps_ = other.usaOps_;
      defcon_ = other.defcon_;
      spaceRace_ = other.spaceRace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndTurn Clone() {
      return new EndTurn(this);
    }

    /// <summary>Field number for the "ussr_ops" field.</summary>
    public const int UssrOpsFieldNumber = 1;
    private int ussrOps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UssrOps {
      get { return ussrOps_; }
      set {
        ussrOps_ = value;
      }
    }

    /// <summary>Field number for the "usa_ops" field.</summary>
    public const int UsaOpsFieldNumber = 2;
    private int usaOps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsaOps {
      get { return usaOps_; }
      set {
        usaOps_ = value;
      }
    }

    /// <summary>Field number for the "defcon" field.</summary>
    public const int DefconFieldNumber = 3;
    private int defcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defcon {
      get { return defcon_; }
      set {
        defcon_ = value;
      }
    }

    /// <summary>Field number for the "space_race" field.</summary>
    public const int SpaceRaceFieldNumber = 4;
    private int spaceRace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRace {
      get { return spaceRace_; }
      set {
        spaceRace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UssrOps != other.UssrOps) return false;
      if (UsaOps != other.UsaOps) return false;
      if (Defcon != other.Defcon) return false;
      if (SpaceRace != other.SpaceRace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UssrOps != 0) hash ^= UssrOps.GetHashCode();
      if (UsaOps != 0) hash ^= UsaOps.GetHashCode();
      if (Defcon != 0) hash ^= Defcon.GetHashCode();
      if (SpaceRace != 0) hash ^= SpaceRace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UssrOps != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UssrOps);
      }
      if (UsaOps != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UsaOps);
      }
      if (Defcon != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Defcon);
      }
      if (SpaceRace != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpaceRace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UssrOps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UssrOps);
      }
      if (UsaOps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsaOps);
      }
      if (Defcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defcon);
      }
      if (SpaceRace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndTurn other) {
      if (other == null) {
        return;
      }
      if (other.UssrOps != 0) {
        UssrOps = other.UssrOps;
      }
      if (other.UsaOps != 0) {
        UsaOps = other.UsaOps;
      }
      if (other.Defcon != 0) {
        Defcon = other.Defcon;
      }
      if (other.SpaceRace != 0) {
        SpaceRace = other.SpaceRace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UssrOps = input.ReadInt32();
            break;
          }
          case 16: {
            UsaOps = input.ReadInt32();
            break;
          }
          case 24: {
            Defcon = input.ReadInt32();
            break;
          }
          case 32: {
            SpaceRace = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeadlineAnnounce : pb::IMessage<HeadlineAnnounce> {
    private static readonly pb::MessageParser<HeadlineAnnounce> _parser = new pb::MessageParser<HeadlineAnnounce>(() => new HeadlineAnnounce());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeadlineAnnounce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadlineAnnounce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadlineAnnounce(HeadlineAnnounce other) : this() {
      spaceRace_ = other.spaceRace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadlineAnnounce Clone() {
      return new HeadlineAnnounce(this);
    }

    /// <summary>Field number for the "space_race" field.</summary>
    public const int SpaceRaceFieldNumber = 1;
    private int spaceRace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpaceRace {
      get { return spaceRace_; }
      set {
        spaceRace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeadlineAnnounce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeadlineAnnounce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpaceRace != other.SpaceRace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpaceRace != 0) hash ^= SpaceRace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpaceRace != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpaceRace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpaceRace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpaceRace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeadlineAnnounce other) {
      if (other == null) {
        return;
      }
      if (other.SpaceRace != 0) {
        SpaceRace = other.SpaceRace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpaceRace = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Reshuffle : pb::IMessage<Reshuffle> {
    private static readonly pb::MessageParser<Reshuffle> _parser = new pb::MessageParser<Reshuffle>(() => new Reshuffle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reshuffle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reshuffle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reshuffle(Reshuffle other) : this() {
      zero_ = other.zero_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reshuffle Clone() {
      return new Reshuffle(this);
    }

    /// <summary>Field number for the "zero" field.</summary>
    public const int ZeroFieldNumber = 1;
    private int zero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Zero {
      get { return zero_; }
      set {
        zero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reshuffle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reshuffle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Zero != other.Zero) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Zero != 0) hash ^= Zero.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Zero != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Zero);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Zero != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Zero);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reshuffle other) {
      if (other == null) {
        return;
      }
      if (other.Zero != 0) {
        Zero = other.Zero;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Zero = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PauseForRevealedCards : pb::IMessage<PauseForRevealedCards> {
    private static readonly pb::MessageParser<PauseForRevealedCards> _parser = new pb::MessageParser<PauseForRevealedCards>(() => new PauseForRevealedCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PauseForRevealedCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PauseForRevealedCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PauseForRevealedCards(PauseForRevealedCards other) : this() {
      playerIndex_ = other.playerIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PauseForRevealedCards Clone() {
      return new PauseForRevealedCards(this);
    }

    /// <summary>Field number for the "player_index" field.</summary>
    public const int PlayerIndexFieldNumber = 1;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PauseForRevealedCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PauseForRevealedCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIndex != other.PlayerIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PauseForRevealedCards other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TutorialAISelectedOption : pb::IMessage<TutorialAISelectedOption> {
    private static readonly pb::MessageParser<TutorialAISelectedOption> _parser = new pb::MessageParser<TutorialAISelectedOption>(() => new TutorialAISelectedOption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TutorialAISelectedOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TutorialAISelectedOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TutorialAISelectedOption(TutorialAISelectedOption other) : this() {
      selectionHint_ = other.selectionHint_;
      selectionId_ = other.selectionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TutorialAISelectedOption Clone() {
      return new TutorialAISelectedOption(this);
    }

    /// <summary>Field number for the "selection_hint" field.</summary>
    public const int SelectionHintFieldNumber = 1;
    private uint selectionHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelectionHint {
      get { return selectionHint_; }
      set {
        selectionHint_ = value;
      }
    }

    /// <summary>Field number for the "selection_id" field.</summary>
    public const int SelectionIdFieldNumber = 2;
    private uint selectionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelectionId {
      get { return selectionId_; }
      set {
        selectionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TutorialAISelectedOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TutorialAISelectedOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelectionHint != other.SelectionHint) return false;
      if (SelectionId != other.SelectionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SelectionHint != 0) hash ^= SelectionHint.GetHashCode();
      if (SelectionId != 0) hash ^= SelectionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SelectionHint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SelectionHint);
      }
      if (SelectionId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SelectionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelectionHint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectionHint);
      }
      if (SelectionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TutorialAISelectedOption other) {
      if (other == null) {
        return;
      }
      if (other.SelectionHint != 0) {
        SelectionHint = other.SelectionHint;
      }
      if (other.SelectionId != 0) {
        SelectionId = other.SelectionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SelectionHint = input.ReadUInt32();
            break;
          }
          case 16: {
            SelectionId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BiddingResults : pb::IMessage<BiddingResults> {
    private static readonly pb::MessageParser<BiddingResults> _parser = new pb::MessageParser<BiddingResults>(() => new BiddingResults());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiddingResults> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiddingResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiddingResults(BiddingResults other) : this() {
      player1Id_ = other.player1Id_;
      player1Bid_ = other.player1Bid_;
      player1BidSide_ = other.player1BidSide_;
      player2Id_ = other.player2Id_;
      player2Bid_ = other.player2Bid_;
      player2BidSide_ = other.player2BidSide_;
      tieBreaker_ = other.tieBreaker_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiddingResults Clone() {
      return new BiddingResults(this);
    }

    /// <summary>Field number for the "player1_id" field.</summary>
    public const int Player1IdFieldNumber = 1;
    private int player1Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1Id {
      get { return player1Id_; }
      set {
        player1Id_ = value;
      }
    }

    /// <summary>Field number for the "player1_bid" field.</summary>
    public const int Player1BidFieldNumber = 2;
    private int player1Bid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1Bid {
      get { return player1Bid_; }
      set {
        player1Bid_ = value;
      }
    }

    /// <summary>Field number for the "player1_bid_side" field.</summary>
    public const int Player1BidSideFieldNumber = 3;
    private int player1BidSide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1BidSide {
      get { return player1BidSide_; }
      set {
        player1BidSide_ = value;
      }
    }

    /// <summary>Field number for the "player2_id" field.</summary>
    public const int Player2IdFieldNumber = 4;
    private int player2Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2Id {
      get { return player2Id_; }
      set {
        player2Id_ = value;
      }
    }

    /// <summary>Field number for the "player2_bid" field.</summary>
    public const int Player2BidFieldNumber = 5;
    private int player2Bid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2Bid {
      get { return player2Bid_; }
      set {
        player2Bid_ = value;
      }
    }

    /// <summary>Field number for the "player2_bid_side" field.</summary>
    public const int Player2BidSideFieldNumber = 6;
    private int player2BidSide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2BidSide {
      get { return player2BidSide_; }
      set {
        player2BidSide_ = value;
      }
    }

    /// <summary>Field number for the "tie_breaker" field.</summary>
    public const int TieBreakerFieldNumber = 7;
    private int tieBreaker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TieBreaker {
      get { return tieBreaker_; }
      set {
        tieBreaker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiddingResults);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiddingResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player1Id != other.Player1Id) return false;
      if (Player1Bid != other.Player1Bid) return false;
      if (Player1BidSide != other.Player1BidSide) return false;
      if (Player2Id != other.Player2Id) return false;
      if (Player2Bid != other.Player2Bid) return false;
      if (Player2BidSide != other.Player2BidSide) return false;
      if (TieBreaker != other.TieBreaker) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player1Id != 0) hash ^= Player1Id.GetHashCode();
      if (Player1Bid != 0) hash ^= Player1Bid.GetHashCode();
      if (Player1BidSide != 0) hash ^= Player1BidSide.GetHashCode();
      if (Player2Id != 0) hash ^= Player2Id.GetHashCode();
      if (Player2Bid != 0) hash ^= Player2Bid.GetHashCode();
      if (Player2BidSide != 0) hash ^= Player2BidSide.GetHashCode();
      if (TieBreaker != 0) hash ^= TieBreaker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player1Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player1Id);
      }
      if (Player1Bid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Player1Bid);
      }
      if (Player1BidSide != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Player1BidSide);
      }
      if (Player2Id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Player2Id);
      }
      if (Player2Bid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Player2Bid);
      }
      if (Player2BidSide != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Player2BidSide);
      }
      if (TieBreaker != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TieBreaker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player1Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1Id);
      }
      if (Player1Bid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1Bid);
      }
      if (Player1BidSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1BidSide);
      }
      if (Player2Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2Id);
      }
      if (Player2Bid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2Bid);
      }
      if (Player2BidSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2BidSide);
      }
      if (TieBreaker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TieBreaker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiddingResults other) {
      if (other == null) {
        return;
      }
      if (other.Player1Id != 0) {
        Player1Id = other.Player1Id;
      }
      if (other.Player1Bid != 0) {
        Player1Bid = other.Player1Bid;
      }
      if (other.Player1BidSide != 0) {
        Player1BidSide = other.Player1BidSide;
      }
      if (other.Player2Id != 0) {
        Player2Id = other.Player2Id;
      }
      if (other.Player2Bid != 0) {
        Player2Bid = other.Player2Bid;
      }
      if (other.Player2BidSide != 0) {
        Player2BidSide = other.Player2BidSide;
      }
      if (other.TieBreaker != 0) {
        TieBreaker = other.TieBreaker;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player1Id = input.ReadInt32();
            break;
          }
          case 16: {
            Player1Bid = input.ReadInt32();
            break;
          }
          case 24: {
            Player1BidSide = input.ReadInt32();
            break;
          }
          case 32: {
            Player2Id = input.ReadInt32();
            break;
          }
          case 40: {
            Player2Bid = input.ReadInt32();
            break;
          }
          case 48: {
            Player2BidSide = input.ReadInt32();
            break;
          }
          case 56: {
            TieBreaker = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TurnZero : pb::IMessage<TurnZero> {
    private static readonly pb::MessageParser<TurnZero> _parser = new pb::MessageParser<TurnZero>(() => new TurnZero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnZero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnZero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnZero(TurnZero other) : this() {
      begin_ = other.begin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnZero Clone() {
      return new TurnZero(this);
    }

    /// <summary>Field number for the "begin" field.</summary>
    public const int BeginFieldNumber = 1;
    private int begin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Begin {
      get { return begin_; }
      set {
        begin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnZero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnZero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Begin != other.Begin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Begin != 0) hash ^= Begin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Begin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Begin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Begin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Begin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnZero other) {
      if (other == null) {
        return;
      }
      if (other.Begin != 0) {
        Begin = other.Begin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Begin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TurnZeroCrisisCard : pb::IMessage<TurnZeroCrisisCard> {
    private static readonly pb::MessageParser<TurnZeroCrisisCard> _parser = new pb::MessageParser<TurnZeroCrisisCard>(() => new TurnZeroCrisisCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnZeroCrisisCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnZeroCrisisCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnZeroCrisisCard(TurnZeroCrisisCard other) : this() {
      crisisCardInstanceId_ = other.crisisCardInstanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnZeroCrisisCard Clone() {
      return new TurnZeroCrisisCard(this);
    }

    /// <summary>Field number for the "crisis_card_instance_id" field.</summary>
    public const int CrisisCardInstanceIdFieldNumber = 1;
    private int crisisCardInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrisisCardInstanceId {
      get { return crisisCardInstanceId_; }
      set {
        crisisCardInstanceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnZeroCrisisCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnZeroCrisisCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CrisisCardInstanceId != other.CrisisCardInstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CrisisCardInstanceId != 0) hash ^= CrisisCardInstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CrisisCardInstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CrisisCardInstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CrisisCardInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrisisCardInstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnZeroCrisisCard other) {
      if (other == null) {
        return;
      }
      if (other.CrisisCardInstanceId != 0) {
        CrisisCardInstanceId = other.CrisisCardInstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CrisisCardInstanceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetStatecraftCardRevealed : pb::IMessage<SetStatecraftCardRevealed> {
    private static readonly pb::MessageParser<SetStatecraftCardRevealed> _parser = new pb::MessageParser<SetStatecraftCardRevealed>(() => new SetStatecraftCardRevealed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetStatecraftCardRevealed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStatecraftCardRevealed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStatecraftCardRevealed(SetStatecraftCardRevealed other) : this() {
      playerIndex_ = other.playerIndex_;
      revealed_ = other.revealed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStatecraftCardRevealed Clone() {
      return new SetStatecraftCardRevealed(this);
    }

    /// <summary>Field number for the "player_index" field.</summary>
    public const int PlayerIndexFieldNumber = 1;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "revealed" field.</summary>
    public const int RevealedFieldNumber = 2;
    private int revealed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Revealed {
      get { return revealed_; }
      set {
        revealed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetStatecraftCardRevealed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetStatecraftCardRevealed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIndex != other.PlayerIndex) return false;
      if (Revealed != other.Revealed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      if (Revealed != 0) hash ^= Revealed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIndex);
      }
      if (Revealed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Revealed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (Revealed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Revealed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetStatecraftCardRevealed other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      if (other.Revealed != 0) {
        Revealed = other.Revealed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Revealed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrisisCardRoll : pb::IMessage<CrisisCardRoll> {
    private static readonly pb::MessageParser<CrisisCardRoll> _parser = new pb::MessageParser<CrisisCardRoll>(() => new CrisisCardRoll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrisisCardRoll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Playdek.TwilightStruggle.V1.EventsReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrisisCardRoll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrisisCardRoll(CrisisCardRoll other) : this() {
      crisisResultIndex_ = other.crisisResultIndex_;
      crisisCardInstanceId_ = other.crisisCardInstanceId_;
      dieRoll_ = other.dieRoll_;
      modifierUssr_ = other.modifierUssr_;
      modifierUsa_ = other.modifierUsa_;
      finalResult_ = other.finalResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrisisCardRoll Clone() {
      return new CrisisCardRoll(this);
    }

    /// <summary>Field number for the "crisis_result_index" field.</summary>
    public const int CrisisResultIndexFieldNumber = 1;
    private int crisisResultIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrisisResultIndex {
      get { return crisisResultIndex_; }
      set {
        crisisResultIndex_ = value;
      }
    }

    /// <summary>Field number for the "crisis_card_instance_id" field.</summary>
    public const int CrisisCardInstanceIdFieldNumber = 2;
    private int crisisCardInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrisisCardInstanceId {
      get { return crisisCardInstanceId_; }
      set {
        crisisCardInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "die_roll" field.</summary>
    public const int DieRollFieldNumber = 3;
    private int dieRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DieRoll {
      get { return dieRoll_; }
      set {
        dieRoll_ = value;
      }
    }

    /// <summary>Field number for the "modifier_ussr" field.</summary>
    public const int ModifierUssrFieldNumber = 4;
    private int modifierUssr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifierUssr {
      get { return modifierUssr_; }
      set {
        modifierUssr_ = value;
      }
    }

    /// <summary>Field number for the "modifier_usa" field.</summary>
    public const int ModifierUsaFieldNumber = 5;
    private int modifierUsa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifierUsa {
      get { return modifierUsa_; }
      set {
        modifierUsa_ = value;
      }
    }

    /// <summary>Field number for the "final_result" field.</summary>
    public const int FinalResultFieldNumber = 6;
    private int finalResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalResult {
      get { return finalResult_; }
      set {
        finalResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrisisCardRoll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrisisCardRoll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CrisisResultIndex != other.CrisisResultIndex) return false;
      if (CrisisCardInstanceId != other.CrisisCardInstanceId) return false;
      if (DieRoll != other.DieRoll) return false;
      if (ModifierUssr != other.ModifierUssr) return false;
      if (ModifierUsa != other.ModifierUsa) return false;
      if (FinalResult != other.FinalResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CrisisResultIndex != 0) hash ^= CrisisResultIndex.GetHashCode();
      if (CrisisCardInstanceId != 0) hash ^= CrisisCardInstanceId.GetHashCode();
      if (DieRoll != 0) hash ^= DieRoll.GetHashCode();
      if (ModifierUssr != 0) hash ^= ModifierUssr.GetHashCode();
      if (ModifierUsa != 0) hash ^= ModifierUsa.GetHashCode();
      if (FinalResult != 0) hash ^= FinalResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CrisisResultIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CrisisResultIndex);
      }
      if (CrisisCardInstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CrisisCardInstanceId);
      }
      if (DieRoll != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DieRoll);
      }
      if (ModifierUssr != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ModifierUssr);
      }
      if (ModifierUsa != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ModifierUsa);
      }
      if (FinalResult != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinalResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CrisisResultIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrisisResultIndex);
      }
      if (CrisisCardInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrisisCardInstanceId);
      }
      if (DieRoll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DieRoll);
      }
      if (ModifierUssr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModifierUssr);
      }
      if (ModifierUsa != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModifierUsa);
      }
      if (FinalResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrisisCardRoll other) {
      if (other == null) {
        return;
      }
      if (other.CrisisResultIndex != 0) {
        CrisisResultIndex = other.CrisisResultIndex;
      }
      if (other.CrisisCardInstanceId != 0) {
        CrisisCardInstanceId = other.CrisisCardInstanceId;
      }
      if (other.DieRoll != 0) {
        DieRoll = other.DieRoll;
      }
      if (other.ModifierUssr != 0) {
        ModifierUssr = other.ModifierUssr;
      }
      if (other.ModifierUsa != 0) {
        ModifierUsa = other.ModifierUsa;
      }
      if (other.FinalResult != 0) {
        FinalResult = other.FinalResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CrisisResultIndex = input.ReadInt32();
            break;
          }
          case 16: {
            CrisisCardInstanceId = input.ReadInt32();
            break;
          }
          case 24: {
            DieRoll = input.ReadInt32();
            break;
          }
          case 32: {
            ModifierUssr = input.ReadInt32();
            break;
          }
          case 40: {
            ModifierUsa = input.ReadInt32();
            break;
          }
          case 48: {
            FinalResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
